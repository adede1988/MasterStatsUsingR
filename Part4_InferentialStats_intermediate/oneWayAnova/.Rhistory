values_to = 'probability')
dfQT %>% ggplot(aes(x = statVal, y = probability, color = distribution))+
geom_line()
library(ggplot2)
# Degrees of freedom and group count
df <- 20
k <- 2
# Create a sequence of x values for t and corresponding q values
t_vals <- seq(-4, 4, length.out = 1000)
q_vals <- sqrt(2) * abs(t_vals)  # transform t to q scale
# Create data frame
df_plot <- data.frame(
t = t_vals,
t_density = dt(t_vals, df),
q = q_vals,
q_density = dt(t_vals, df) * sqrt(2)  # rescale t density to q scale
)
# Plot both distributions
ggplot(df_plot) +
geom_line(aes(x = t, y = t_density), color = "blue", size = 1, linetype = "solid") +
geom_line(aes(x = q, y = q_density), color = "red", size = 1, linetype = "dashed") +
labs(title = "Comparison of t-distribution and q-distribution (k = 2)",
x = "Value", y = "Density") +
annotate("text", x = -3, y = 0.3, label = "t-distribution (blue)", color = "blue") +
annotate("text", x = 4.5, y = 0.25, label = "q-distribution (red, dashed)", color = "red") +
theme_minimal()
names(df_plot)
df_plot = df_plot %>% pivot_longer(cols = c('t_density', 'q_density'),
names_to = 'distribution',
values_to = 'density')
# Approximate density using numerical derivative of the CDF
cdf_vals <- ptukey(q_vals, nmeans = 5, df = df)
dq_approx <- c(NA, diff(cdf_vals) / diff(q_vals))
# Create data frame
df_plot <- data.frame(
t = t_vals,
t_density = dt(t_vals, df),
q = q_vals,
q_density = dt(t_vals, df) * sqrt(2),  # rescale t density to q scale
q_density_5Groups = dq_approx
)
df_plot = df_plot %>% pivot_longer(cols = c('t_density', 'q_density', 'q_density_5Groups'),
names_to = 'distribution',
values_to = 'density')
# Plot both distributions
ggplot(df_plot, aes(x = t, y = density, color = density)) +
geom_line( size = 2, linetype = "solid") +
labs(title = "Comparison of t-distribution and q-distribution (two groups!)",
x = "Value", y = "Density") +
# annotate("text", x = -3, y = 0.3, label = "t-distribution (blue)", color = "blue") +
# annotate("text", x = 4.5, y = 0.25, label = "q-distribution (red, dashed)", color = "red") +
theme_minimal()
# Plot both distributions
ggplot(df_plot, aes(x = t, y = density, color = distribution)) +
geom_line( size = 2, linetype = "solid") +
labs(title = "Comparison of t-distribution and q-distribution (two groups!)",
x = "Value", y = "Density") +
# annotate("text", x = -3, y = 0.3, label = "t-distribution (blue)", color = "blue") +
# annotate("text", x = 4.5, y = 0.25, label = "q-distribution (red, dashed)", color = "red") +
theme_minimal()
# Plot both distributions
ggplot(df_plot, aes(x = q, y = density, color = distribution)) +
geom_line( size = 2, linetype = "solid") +
labs(title = "Comparison of t-distribution and q-distribution (two groups!)",
x = "Value", y = "Density") +
# annotate("text", x = -3, y = 0.3, label = "t-distribution (blue)", color = "blue") +
# annotate("text", x = 4.5, y = 0.25, label = "q-distribution (red, dashed)", color = "red") +
theme_minimal()
# Plot both distributions
ggplot(df_plot, aes(x = q, y = density, color = distribution)) +
geom_line( size = 2, linetype = "solid") +
labs(title = "Comparison of t-distribution and q-distribution (two groups!)",
x = "Value", y = "Density") +
# annotate("text", x = -3, y = 0.3, label = "t-distribution (blue)", color = "blue") +
# annotate("text", x = 4.5, y = 0.25, label = "q-distribution (red, dashed)", color = "red") +
myTheme + brightCol
# Plot both distributions
ggplot(df_plot, aes(x = q, y = density, color = distribution)) +
geom_line( size = 2, linetype = "solid") +
labs(title = "Comparison of t and q-distributions",
x = "Value", y = "Density") +
# annotate("text", x = -3, y = 0.3, label = "t-distribution (blue)", color = "blue") +
# annotate("text", x = 4.5, y = 0.25, label = "q-distribution (red, dashed)", color = "red") +
myTheme + brightCol
# Create data frame
df_plot <- data.frame(
t = t_vals,
t_density_2Groups = dt(t_vals, df),
q = q_vals,
q_density_2Groups = dt(t_vals, df) * sqrt(2),  # rescale t density to q scale
q_density_5Groups = dq_approx
)
df_plot = df_plot %>% pivot_longer(cols = c('t_density_2Groups', 'q_density_2Groups', 'q_density_5Groups'),
names_to = 'distribution',
values_to = 'density')
# Plot both distributions
ggplot(df_plot, aes(x = q, y = density, color = distribution)) +
geom_line( size = 2, linetype = "solid") +
labs(title = "Comparison of t and q-distributions",
x = "Value", y = "Density") +
# annotate("text", x = -3, y = 0.3, label = "t-distribution (blue)", color = "blue") +
# annotate("text", x = 4.5, y = 0.25, label = "q-distribution (red, dashed)", color = "red") +
myTheme + brightCol
test = anova(lm(SalesInThousands ~ Promotion, data = df))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(lme4)
library(kableExtra)
# Chunk 2: data
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
temp = df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"]
df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"] = temp -
rnorm(length(temp), 1.5, 30)
min(df$SalesInThousands)
df$SalesInThousands[df$SalesInThousands<0] <- rnorm(sum(df$SalesInThousands<0),
10, 3)
min(df$SalesInThousands)
df$Promotion = as.factor(df$Promotion)
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(~MarketSize)
df %>% ggplot(aes(y = SalesInThousands, color = MarketSize)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df %>% ggplot(aes(x = AgeOfStore, y = SalesInThousands, color = MarketSize)) +
geom_jitter() +
myTheme + brightCol + brightFil
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
# Chunk 3: sample size
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
group_means <- df %>%
group_by(Promotion) %>%
summarise(
mean_y = mean(SalesInThousands, na.rm = TRUE),
xmin = as.numeric(Promotion[1])-.5,
xmax = as.numeric(Promotion[1])+.5
)
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('Promotion') +
theme(legend.position = 'none')
test = anova(lm(SalesInThousands ~ Promotion, data = df))
TukeyHSD(test)
test = aov(lm(SalesInThousands ~ Promotion, data = df))
TukeyHSD(test)
anova(lm(SalesInThousands ~ Promotion, data = df))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
# Chunk 2: data
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
df$Promotion <- as.factor(df$Promotion)
#average over weeks within store
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
anova(lm(SalesInThousands ~ Promotion, data = df))
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
test = anova(lm(SalesInThousands ~ Promotion, data = df))
test
MSerror = test$`Mean Sq`[2]
df %>% group_by(Promotion) %>%
summarize(groupn = n(),
groupMean = mean(SalesInThousands))
sumVals = df %>% group_by(Promotion) %>%
summarize(groupn = n(),
groupMean = mean(SalesInThousands))
sumVals = df %>% group_by(Promotion) %>%
summarize(n = n(),
Mean = mean(SalesInThousands))
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]) / 2)
df = nrow(df) - 3
dferror = nrow(df) - 3
pval = ptukey(qVal, 3, dferror)
dferror = nrow(df) - 3
nrow(df)
nrow(df)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
# Chunk 2: data
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
df$Promotion <- as.factor(df$Promotion)
#average over weeks within store
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
dferror = nrow(df) - 3
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]) / 2)
pval = ptukey(qVal, 3, dferror)
sumVals
pval
pval = 1 - ptukey(qVal, 3, dferror)
pval
test = anova(lm(SalesInThousands ~ Promotion, data = df))
test
#FORMULA: Q = abs(mean1 - mean2) / [(MSerror / n1 + MSerror / n2) / 2]
#get all the necessary values:
MSerror = test$`Mean Sq`[2]
sumVals = df %>% group_by(Promotion) %>%
summarize(n = n(),
Mean = mean(SalesInThousands))
dferror = nrow(df) - 3
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]) / 2)
pval = 1 - ptukey(qVal, 3, dferror)
pval
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))
pval = 1 - ptukey(qVal, 3, dferror)
pval
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df))
)
test = anova(lm(SalesInThousands ~ Promotion, data = df))
test
#FORMULA: Q = abs(mean1 - mean2) / [(MSerror / n1 + MSerror / n2) / 2]
#get all the necessary values:
MSerror = test$`Mean Sq`[2]
sumVals = df %>% group_by(Promotion) %>%
summarize(n = n(),
Mean = mean(SalesInThousands))
dferror = nrow(df) - 3
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))
pval = 1 - ptukey(qVal, 3, dferror)
pval
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2])))
pval = 1 - ptukey(qVal, 3, dferror)
pval
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
pval = 1 - ptukey(qVal, 3, dferror)
pval
cat('the adjusted p-value for the difference is: ', round(pval, 6))
#remember that confidence intervals are the middle 1-alpha proportion of the
#distribution
qtukey(.975, 3, dferror)
critQ = qtukey(.975, 3, dferror)
#standard error is just the denominator from the tukey equation:
se =  sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
critQ*se
abs(sumVals$Mean[1] - sumVAls$Mean[2]) + critQ*se
abs(sumVals$Mean[1] - sumVals$Mean[2]) + critQ*se
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
abs(sumVals$Mean[1] - sumVals$Mean[2]) + (critQ/sqrt(2))*se
critQ = qtukey(.95, 3, dferror)
#standard error is just the denominator from the tukey equation:
se =  sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
abs(sumVals$Mean[1] - sumVals$Mean[2]) + critQ*se
abs(sumVals$Mean[1] - sumVals$Mean[2]) + (critQ/sqrt(2))*se
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
critQ = qtukey(.95, 3, dferror)
#standard error is just the denominator from the tukey equation:
se =  sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
abs(sumVals$Mean[1] - sumVals$Mean[2]) + critQ*se
abs(sumVals$Mean[1] - sumVals$Mean[2]) + (critQ/sqrt(2))*se
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
pval = 1 - ptukey(qVal, 3, dferror)
cat('the adjusted p-value for the difference is: ', round(pval, 6))
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2])))
pval = 1 - ptukey(qVal, 3, dferror)
cat('the adjusted p-value without dividing by 2 for the difference is: ', round(pval, 6))
#promotion 1 v. 2
qVal = abs(sumVals$Mean[1] - sumVals$Mean[2]) /
sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
pval = 1 - ptukey(qVal, 3, dferror)
cat('the adjusted p-value without dividing by 2 for the difference is: ', round(pval, 6))
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
plot(TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df))))
critQ = qtukey(.95, 3, dferror)
#standard error is just the denominator from the tukey equation:
se =  sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
abs(sumVals$Mean[1] - sumVals$Mean[2]) + critQ*se
abs(sumVals$Mean[1] - sumVals$Mean[2]) + (critQ/sqrt(2))*se
critQ = qtukey(.95, 3, dferror)
#standard error is just the denominator from the tukey equation:
se =  sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
abs(sumVals$Mean[1] - sumVals$Mean[2]) + critQ*se
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
critQ = qtukey(.95, 3, dferror)
#standard error is just the denominator from the tukey equation:
se =  sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
abs(sumVals$Mean[1] - sumVals$Mean[2]) + critQ*se
#think critically: why not .975 like we've used for 2-tailed intervals before?
critQ = qtukey(.95, 3, dferror)
#standard error is just the denominator from the tukey equation:
se =  sqrt(((MSerror/sumVals$n[1] + MSerror/sumVals$n[2]))/2)
topBound = sumVals$Mean[1] - sumVals$Mean[2] + critQ*se
lowBound = sumVals$Mean[1] - sumVals$Mean[2] + critQ*se
cat('the 95% confidence interval for the difference between Promotion 1 and 2: ',
round(lowBound, 3), ' to ', round(topBound, 3))
topBound = sumVals$Mean[1] - sumVals$Mean[2] + critQ*se
lowBound = sumVals$Mean[1] - sumVals$Mean[2] - critQ*se
cat('the 95% confidence interval for the difference between Promotion 1 and 2: ',
round(lowBound, 3), ' to ', round(topBound, 3))
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
cat('diff: ', round(sumVals$Mean[1] - sumVals$Mean[2], 3),
'\n lwr: ', round(lowBound, 3),
'\n upr: ', round(topBound, 3))
cat('diff: ', round(sumVals$Mean[1] - sumVals$Mean[2], 3),
'\n lwr: ', round(lowBound, 3),
'\n upr: ', round(topBound, 3),
'\n p adj: ', round(pval, 3))
cat('diff: ', round(sumVals$Mean[1] - sumVals$Mean[2], 3),
'\n lwr: ', round(lowBound, 3),
'\n upr: ', round(topBound, 3),
'\n p adj: ', round(pval, 6))
TukeyHSD(aov(lm(SalesInThousands ~ Promotion, data = df)))
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
temp = df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"]
df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"] = temp -
rnorm(length(temp), 1.5, 30)
min(df$SalesInThousands)
df$SalesInThousands[df$SalesInThousands<0] <- rnorm(sum(df$SalesInThousands<0),
10, 3)
min(df$SalesInThousands)
df$Promotion = as.factor(df$Promotion)
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(~MarketSize)
df %>% ggplot(aes(y = SalesInThousands, color = MarketSize)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df %>% ggplot(aes(x = AgeOfStore, y = SalesInThousands, color = MarketSize)) +
geom_jitter() +
myTheme + brightCol + brightFil
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
group_means <- df %>%
group_by(Promotion) %>%
summarise(
mean_y = mean(SalesInThousands, na.rm = TRUE),
xmin = as.numeric(Promotion[1])-.5,
xmax = as.numeric(Promotion[1])+.5
)
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('Promotion') +
theme(legend.position = 'none')
df %>% ggplot(aes(x = AgeOfStore, y = SalesInThousands, color = MarketSize)) +
geom_jitter() +
myTheme + brightCol + brightFil
df %>% ggplot(aes(y = SalesInThousands, color = MarketSize)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
df %>% ggplot(aes(x = as.numeric(Promotion),
y = SalesInThousands,
color = Promotion)) +
geom_jitter()+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
df %>% ggplot(aes(x = as.numeric(Promotion),
y = SalesInThousands,
color = Promotion)) +
geom_jitter()+
geom_boxplot() +
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
df %>% ggplot(aes(x = as.numeric(Promotion),
y = SalesInThousands,
color = Promotion)) +
geom_jitter()+
geom_boxplot(fill = NA) +
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
df %>% ggplot(aes(x = as.numeric(Promotion),
y = SalesInThousands,
color = Promotion)) +
geom_jitter()+
stat_summary(fun = mean, geom = "crossbar",
width = 0.5, fatten = 2) +
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
df %>% ggplot(aes(x = as.numeric(Promotion),
y = SalesInThousands,
color = Promotion)) +
geom_jitter()+
geom_hline(yintercept = mean(Df$SalesInThousands), color = 'red', linetype= 'dashed') +
stat_summary(fun = mean, geom = "crossbar",
width = 0.5, fatten = 2) +
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
df %>% ggplot(aes(x = as.numeric(Promotion),
y = SalesInThousands,
color = Promotion)) +
geom_jitter()+
geom_hline(yintercept = mean(df$SalesInThousands), color = 'red', linetype= 'dashed') +
stat_summary(fun = mean, geom = "crossbar",
width = 0.5, fatten = 2) +
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
