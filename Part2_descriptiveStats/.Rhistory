xlim(c(-3, 10))
df %>% ggplot(aes(x = observed, color = dist)) +
geom_freqpoly(breaks = seq(-3.5,10.5, 1), linewidth = 3) + myTheme + brightCol +
xlim(c(-3, 10))
## challenge:
## 1) Calculate central tendency with builtin functions
## 2) generate all the freq_poly plots for all distributions at once!
## 3) put all the central tendency measures on all of them at once!
## hint: use faceting to make the plots easy to read
#calcualte central tendency:
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
mode_val = Mode(round(observed,1)),
median_val = median(observed)) -> builtinAvg
#pivot longer to facilitate plotting
builtinAvg <- builtinAvg %>%
pivot_longer(cols = -c('dist'),
names_to = 'type',
values_to = 'centralTend')
df %>% ggplot(aes(x = observed, color = dist)) +
geom_freqpoly(breaks = seq(-1.5, 8, 1), linewidth = 2) +
facet_grid(dist~.) + myTheme + brightCol -> p
p + geom_vline(data = builtinAvg,
aes(xintercept = centralTend, linetype = type),
size = 3, color = 'red') +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
#mistake code:
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
mode_val = Mode(round(observed,1)),
median_val = median(observed),
var_val = var(observed),
sd_val = sd(observed),
ss_val = sum((observed - mean_val)^2),
range_val = max(observed) - min(observed),
Q_25 = quantile(observed, .25),
Q_75 = quantile(observed, .75),
IQR_val = Q_75 - Q_25,
mad_val = abs(observed - mean_val)/(sampSize-1)
)-> descriptives
#corrected:
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
mode_val = Mode(round(observed,1)),
median_val = median(observed),
var_val = var(observed),
sd_val = sd(observed),
ss_val = sum((observed - mean_val)^2),
range_val = max(observed) - min(observed),
Q_25 = quantile(observed, .25),
Q_75 = quantile(observed, .75),
IQR_val = Q_75 - Q_25,
mad_val = sum(abs(observed - mean_val))/(sampSize-1)
)-> descriptives
#let's round the values so that the table is easier to read
descriptives %>% mutate_if(is.numeric, ~ round(.,2)) -> roundedDes
#equivalently:
descriptives %>% mutate_if(is.numeric, function(x) round(x,2)) -> roundedDes
dat = rnorm(3000, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
sampleSize = logspace(log(10,10), log(100000,10), 200)
df = data.frame()
for (ss in sampleSize){
ss = round(ss)
curDat = rnorm(ss, mean = 0, sd = 1)
df = rbind(df, data.frame('samp' = replicate(ss, ss),
'val' = curDat))
}
bin_breaks = seq(-4, 4, .1)
discretizeAndPlot <- function(df, bin_breaks){
df_bins <- df %>%
mutate(bin = cut(val, breaks = bin_breaks, right = F)) %>%
count(samp, bin)
# Create a complete data frame with all possible combinations of samp and bins
complete_bins <- expand.grid(
samp = unique(df$samp),
bin = levels(cut(df$val, breaks = bin_breaks, right = F))
)
# Join the counts with the complete data frame
df_hist <- complete_bins %>%
left_join(df_bins, by = c("samp", "bin")) %>%
replace_na(list(n = 0)) %>%
group_by(samp) %>%
mutate(proportion = n / sum(n))
# Extract bin midpoints for plotting
df_hist <- df_hist %>% group_by(samp, bin) %>%
mutate(bin_midpoint =
mean(sapply(strsplit(as.character(bin), ","),
function(x) {
as.numeric(gsub("\\(|\\[|\\]|\\)", "", x))
}
)))
ggplot(df_hist, aes(x = bin_midpoint, y = proportion, group = samp, color = samp)) +
geom_line() +
scale_color_gradient(trans = "log")
}
discretizeAndPlot(df, bin_breaks)
dat = rnorm(3000, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 0, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
#useful for simulating random probabilities
dat = runif(30, min = -2, max = 8)
ggplot(data.frame('uni' = dat), aes(x = norm)) + geom_freqpoly()
dat = runif(30, min = -2, max = 8)
#useful for simulating random probabilities
dat = runif(30, min = -2, max = 8)
ggplot(data.frame('uni' = dat), aes(x = uni)) + geom_freqpoly()
#useful for simulating random probabilities
dat = runif(30, min = -2, max = 8)
ggplot(data.frame('uni' = dat), aes(x = uni)) + geom_freqpoly()
#useful for simulating random probabilities
dat = runif(30, min = -2, max = 8)
ggplot(data.frame('uni' = dat), aes(x = uni)) + geom_freqpoly()
#useful for simulating random probabilities
dat = runif(30, min = -2, max = 8)
ggplot(data.frame('uni' = dat), aes(x = uni)) + geom_freqpoly()
#useful for simulating random probabilities
dat = runif(30, min = -2, max = 8)
ggplot(data.frame('uni' = dat), aes(x = uni)) + geom_freqpoly()
dat = rnorm(30, mean = 3, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 3, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 3, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
#useful for modeling things like income
dat = rlnorm(30,log(3), 1)
ggplot(data.frame('lnorm' = dat), aes(x = lnorm)) + geom_freqpoly()
#useful for modeling things like income
dat = rlnorm(30,log(3), 1)
ggplot(data.frame('lnorm' = dat), aes(x = lnorm)) + geom_freqpoly()
#useful for modeling things like income
dat = rlnorm(30,log(3), 1)
ggplot(data.frame('lnorm' = dat), aes(x = lnorm)) + geom_freqpoly()
#useful for modeling things like income
dat = rlnorm(30,log(3), 1)
ggplot(data.frame('lnorm' = dat), aes(x = lnorm)) + geom_freqpoly()
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) + geom_freqpoly()
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) + geom_freqpoly()
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) + geom_freqpoly()
ggplot(data.frame('pois' = dat), aes(x = pois)) +
geom_freqpoly(breaks = seq(-.5, 8.5, 1))
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) +
geom_freqpoly(breaks = seq(-.5, 8.5, 1))
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) +
geom_freqpoly(breaks = seq(-.5, 8.5, 1))
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) +
geom_freqpoly(breaks = seq(-.5, 8.5, 1))
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) +
geom_freqpoly(breaks = seq(-.5, 8.5, 1))
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) +
geom_freqpoly(breaks = seq(-.5, 8.5, 1))
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
dat = rnorm(30, mean = 3, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
dat = rnorm(30, mean = 3, sd = 1)
ggplot(data.frame('norm' = dat), aes(x = norm)) + geom_freqpoly()
#useful for simulating random probabilities
dat = runif(30, min = -2, max = 8)
ggplot(data.frame('uni' = dat), aes(x = uni)) + geom_freqpoly()
#useful for modeling things like income
dat = rlnorm(30,log(3), 1)
ggplot(data.frame('lnorm' = dat), aes(x = lnorm)) + geom_freqpoly()
#useful for modeling events like receiving emails!
dat = rpois(30, lambda = 3)
ggplot(data.frame('pois' = dat), aes(x = pois)) +
geom_freqpoly(breaks = seq(-.5, 8.5, 1))
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
courseThemePath =
"C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\courseTheme.R"
library(tidyverse) # data manipulation and visualization
source(courseThemePath)
library(pracma) #practical numerical math functions (needed for Mode)
sampSize = 10000
df = data.frame('norm' = rnorm(sampSize, 3, 1),
'lnorm' = rlnorm(sampSize,log(3), 1),
'unif' = runif(sampSize,-2, 8),
'pois' = rpois(sampSize, lambda = 3))
df <- df %>% pivot_longer(cols = c(names(df)),
values_to = 'observed',
names_to = 'dist')
p <- df %>% filter(dist == 'norm') %>%
ggplot(aes(x = observed, group = dist, color = dist, fill = dist)) +
geom_freqpoly(breaks = seq(-1, 7, .1), linewidth = 3) +
myTheme + brightCol + brightFil
print(p)
normDat = df$observed[df$dist == 'norm']
#what's the mean value?
# mean = sum(x) / length(x)
sum(normDat) / length(normDat) -> meanVal
#what's the median value?
#value in the middle:
normDat = sort(normDat)
if(length(normDat) %% 2 ==0) { #even length!
midVal = length(normDat)/2
(normDat[midVal] + normDat[midVal+1]) / 2 -> medVal
} else { #odd length!
midVal = length(normDat)/2  + .5
normDat[midVal] -> medVal
}
#what's the modal value?
#this line is a bit of a hack to get a central mode in continuous data:
round(normDat, 1) -> normDat
uniSet = unique(normDat)
#are there even any repeated values?
if(length(uniSet) == length(normDat)){ #every value unique!
sort(normDat)[1] -> modVal
} else { #there's going to be a proper mode!
lengths = rep(0, length(uniSet))
for(jj in 1:length(uniSet)){
lengths[jj] = sum(normDat==uniSet[jj])
}
uniSet[which.max(lengths)] -> modVal
}
# Add vertical lines for central tendency measures
p + geom_vline(xintercept = meanVal, linetype = 'solid', size = 3, color = 'red') +
geom_vline(xintercept = modVal, linetype = 'dashed', size = 3, color = 'red') +
geom_vline(xintercept = medVal, linetype = 'dotted', size = 3, color = 'red')
#how many distributions do we have data for?
dists = unique(df$dist)
L = length(dists)
#create a data.frame to put all the central tendancy values into:
group_averages = data.frame('dist' = dists,
'meanVal' = rep(NA,L),
'modeVal' = rep(NA,L),
'medianVal' = rep(NA,L))
#Challenge: can you write a for loop to fill out the group_averages data frame?
for(ii in 1:L){
curDat = df$observed[df$dist == dists[ii]]
#what's the mean value?
# mean = sum(x) / length(x)
group_averages$meanVal[ii] = sum(curDat) / length(curDat)
#what's the median value?
#value in the middle:
curDat = sort(curDat)
if(length(curDat) %% 2 ==0) { #even length!
midVal = length(curDat)/2
group_averages$medianVal[ii] = (curDat[midVal] + curDat[midVal+1]) / 2
} else { #odd length!
midVal = length(curDat)/2  + .5
group_averages$medianVal[ii] = curDat[midVal]
}
#what's the modal value?
round(curDat, 1) -> curDat
uniSet = unique(curDat)
#are there even any repeated values?
if(length(uniSet) == length(curDat)){ #every value unique!
group_averages$modeVal[ii] = curDat[1]
} else { #there's going to be a proper mode!
lengths = rep(0, length(uniSet))
for(jj in 1:length(uniSet)){
lengths[jj] = sum(curDat==uniSet[jj])
}
group_averages$modeVal[ii] = uniSet[which.max(lengths)]
}
}
group_averages
group_averages <- group_averages %>% pivot_longer(cols = c('meanVal', 'modeVal', 'medianVal'),
names_to = 'measure',
values_to = 'centralTend')
# Calculate group means
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
mode_val = Mode(round(observed,1)),
median_val = median(observed)) -> builtinAvg
p <- df %>% filter(dist == 'pois') %>%
ggplot(aes(x = observed, group = dist, color = dist, fill = dist)) +
geom_freqpoly(breaks = seq(-1.5, 9.5, 1), linewidth = 3) +
myTheme + brightCol + brightFil
print(p)
#for now, just hard code in the central tendency values
p + geom_vline(data = filter(group_averages, dist == 'pois'),
aes(xintercept = centralTend, linetype = measure),
size = 3, color = 'red')
#lnorm:
p <- df %>% filter(dist == 'lnorm') %>%
ggplot(aes(x = observed, group = dist, color = dist, fill = dist)) +
geom_freqpoly(breaks = seq(-1.5, 9.5, 1), linewidth = 3) +
myTheme + brightCol + brightFil
print(p)
#for now, just hard code in the central tendency values
p + geom_vline(data = filter(group_averages, dist == 'lnorm'),
aes(xintercept = centralTend, linetype = measure),
size = 3, color = 'red')
#unif:
p <- df %>% filter(dist == 'unif') %>%
ggplot(aes(x = observed, group = dist, color = dist, fill = dist)) +
geom_freqpoly(breaks = seq(-1.5, 9.5, 1), linewidth = 3) +
myTheme + brightCol + brightFil
print(p)
#for now, just hard code in the central tendency values
p + geom_vline(data = filter(group_averages, dist == 'unif'),
aes(xintercept = centralTend, linetype = measure),
size = 3, color = 'red')
## challenge:
## 1) Calculate central tendency with builtin functions
## 2) generate all the freq_poly plots for all distributions at once!
## 3) put all the central tendency measures on all of them at once!
## hint: use faceting to make the plots easy to read
#calcualte central tendency:
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
mode_val = Mode(round(observed,1)),
median_val = median(observed)) -> builtinAvg
#pivot longer to facilitate plotting
builtinAvg <- builtinAvg %>%
pivot_longer(cols = -c('dist'),
names_to = 'type',
values_to = 'centralTend')
df %>% ggplot(aes(x = observed, color = dist)) +
geom_freqpoly(breaks = seq(-1.5, 8, 1), linewidth = 2) +
facet_grid(dist~.) + myTheme + brightCol -> p
p + geom_vline(data = builtinAvg,
aes(xintercept = centralTend, linetype = type),
size = 3, color = 'red') +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
#challenge question: If you regenerate the simulated data,
#                    what will happen to the mode of the mode
#                    of the uniform data?
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
courseThemePath =
"C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\courseTheme.R"
library(tidyverse) # data manipulation and visualization
source(courseThemePath)
library(pracma) #practical numerical math functions (needed for Mode)
sampSize = 10000
df = data.frame('norm' = rnorm(sampSize, 3, 1),
'lnorm' = rlnorm(sampSize,log(3), 1),
'unif' = runif(sampSize,-2, 8),
'pois' = rpois(sampSize, lambda = 3))
df <- df %>% pivot_longer(cols = c(names(df)),
values_to = 'observed',
names_to = 'dist')
p <- df %>% filter(dist == 'norm') %>%
ggplot(aes(x = observed, group = dist, color = dist, fill = dist)) +
geom_freqpoly(breaks = seq(-1, 7, .1), linewidth = 3) +
myTheme + brightCol + brightFil
print(p)
normDat = df$observed[df$dist == 'norm']
#what's the mean value?
# mean = sum(x) / length(x)
sum(normDat) / length(normDat) -> meanVal
#what are the squared deviations from the meanVal?
(normDat - meanVal)^2 -> squaredDevs
#what's the average squared Dev?
sum(squaredDevs) / (length(squaredDevs)-1) -> variance
#square root it
sqrt(variance) -> sd
# Add vertical lines for central tendency measures
p + geom_vline(xintercept = meanVal, linetype = 'solid', size = 3, color = 'red') +
geom_vline(xintercept = meanVal+sd, linetype = 'dotted', size = 3, color = 'red') +
geom_vline(xintercept = meanVal-sd, linetype = 'dotted', size = 3, color = 'red')
#calcualte central tendency:
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
sd_val = sd(observed),
sd1 = sd_val + mean_val,
sdminus1 = meanVal - sd_val) -> builtinAvg
#pivot longer to facilitate plotting
builtinAvg <- builtinAvg %>%
pivot_longer(cols = -c('dist'),
names_to = 'type',
values_to = 'stat')
df %>% ggplot(aes(x = observed, color = dist)) +
geom_freqpoly(breaks = seq(-1.5, 8, 1), linewidth = 2) +
facet_grid(dist~.) + myTheme + brightCol -> p
p + geom_vline(data = filter(builtinAvg, type != 'sd_val'),
aes(xintercept = stat, linetype = type),
size = 3, color = 'red') +
scale_linetype_manual(values = c('solid', 'dotted', 'dotted')) +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
courseThemePath =
"C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\courseTheme.R"
library(tidyverse) # data manipulation and visualization
source(courseThemePath)
library(pracma) #practical numerical math functions (needed for Mode)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
courseThemePath =
"C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\courseTheme.R"
library(tidyverse) # data manipulation and visualization
source(courseThemePath)
library(pracma) #practical numerical math functions (needed for Mode)
sampSize = 10000
df = data.frame('norm' = rnorm(sampSize, 3, 1),
'lnorm' = rlnorm(sampSize,log(3), 1),
'unif' = runif(sampSize,-2, 8),
'pois' = rpois(sampSize, lambda = 3))
df <- df %>% pivot_longer(cols = c(names(df)),
values_to = 'observed',
names_to = 'dist')
p <- df %>% filter(dist == 'norm') %>%
ggplot(aes(x = observed, group = dist, color = dist, fill = dist)) +
geom_freqpoly(breaks = seq(-1, 7, .1), linewidth = 3) +
myTheme + brightCol + brightFil
print(p)
normDat = df$observed[df$dist == 'norm']
#what's the max value
max(normDat)-> maxVal
#what's the min value
min(normDat) -> minVal
#what's the max - min = range
maxVal - minVal -> range
# Add vertical lines for the range
p + geom_vline(xintercept = minVal, linetype = 'solid', size = 3, color = 'red') +
geom_vline(xintercept = maxVal, linetype = 'solid', size = 3, color = 'red')
normDat = sort(normDat)
#25th percentile first quartile
median(normDat[1:(sampSize/2)]) -> q25
#75th percentile third quartile
median(normDat[(1+(sampSize/2)):sampSize]) -> q75
# Add vertical lines for the interquartile range
p + geom_vline(xintercept = q25, linetype = 'solid', size = 3, color = 'red') +
geom_vline(xintercept = q75, linetype = 'solid', size = 3, color = 'red')
#alternatively box plots show the IQR by default:
ggplot(data = data.frame('values' = normDat),
aes(y = values)) + geom_boxplot()
#MAD = sum(abs(x - mean(x))) / (n-1)
#mean val
mean(normDat) -> meanVal
#absolute deviations
abs(normDat - meanVal) -> abDevs
#sum and divide
sum(abDevs) / (sampSize - 1) -> madVal
# Add vertical lines for the mad
p + geom_vline(xintercept = meanVal +madVal, linetype = 'solid', size = 3, color = 'red') +
geom_vline(xintercept = meanVal - madVal, linetype = 'solid', size = 3, color = 'red')
#mistake code:
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
mode_val = Mode(round(observed,1)),
median_val = median(observed),
var_val = var(observed),
sd_val = sd(observed),
ss_val = sum((observed - mean_val)^2),
range_val = max(observed) - min(observed),
Q_25 = quantile(observed, .25),
Q_75 = quantile(observed, .75),
IQR_val = Q_75 - Q_25,
mad_val = abs(observed - mean_val)/(sampSize-1)
)-> descriptives
#corrected:
df  %>%
group_by(dist) %>%
summarise(mean_val = mean(observed),
mode_val = Mode(round(observed,1)),
median_val = median(observed),
var_val = var(observed),
sd_val = sd(observed),
ss_val = sum((observed - mean_val)^2),
range_val = max(observed) - min(observed),
Q_25 = quantile(observed, .25),
Q_75 = quantile(observed, .75),
IQR_val = Q_75 - Q_25,
mad_val = sum(abs(observed - mean_val))/(sampSize-1)
)-> descriptives
#let's round the values so that the table is easier to read
descriptives %>% mutate_if(is.numeric, ~ round(.,2)) -> roundedDes
#equivalently:
descriptives %>% mutate_if(is.numeric, function(x) round(x,2)) -> roundedDes
library(knitr)
kable(roundedDes)
