test = lm(test$residuals ~ df$MarketSize)
tab = anova(Test)
tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
test = lm(test$residuals ~ df$MarketSize)
tab = anova(Test)
tab = anova(test)
tab
#explained variance
SStotal = sum((df$SalesInThousands - GM)^2)
test = lm(df$SalesInThousands ~ df$Promotion, data = df)
tab = anova(test)
results$step1 = tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
results$Promo = SSbetProm / SStotal
test = lm(test$residuals ~ df$MarketSize)
tab = anova(test)
tab
tab$`Sum Sq`[1] / SStotal + results$step1
tab$`Sum Sq`[1]
SStotal
results$step1
results = data.frame()
#explained variance
SStotal = sum((df$SalesInThousands - GM)^2)
test = lm(df$SalesInThousands ~ df$Promotion, data = df)
tab = anova(test)
results$step1 = tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
results = data.frame(step1 = 0)
#explained variance
SStotal = sum((df$SalesInThousands - GM)^2)
test = lm(df$SalesInThousands ~ df$Promotion, data = df)
tab = anova(test)
results$step1 = tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
results$Promo = SSbetProm / SStotal
View(results)
test = lm(test$residuals ~ df$MarketSize)
tab = anova(test)
tab$`Sum Sq`[1] / SStotal + results$step1
(SSbetProm + SSbetMarSize) / SStotal
test = lm(test$residuals ~ df$MarketSize:df$Promotion)
tab = anova(test)
results$step3 = tab$`Sum Sq`[1] / SStotal + results$step1 + results$step2
results$ALL = (SSbetProm + SSbetMarSize + SSinter) / SStotal
results = data.frame(step1 = 0)
#explained variance
SStotal = sum((df$SalesInThousands - GM)^2)
test = lm(df$SalesInThousands ~ df$Promotion, data = df)
tab = anova(test)
results$step1 = tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
results$Promo = SSbetProm / SStotal
test = lm(test$residuals ~ df$MarketSize)
tab = anova(test)
results$step2 = tab$`Sum Sq`[1] / SStotal + results$step1
results$P_MS = (SSbetProm + SSbetMarSize) / SStotal
test = lm(test$residuals ~ df$MarketSize:df$Promotion)
tab = anova(test)
results$step3 = tab$`Sum Sq`[1] / SStotal + results$step1 + results$step2
results$ALL = (SSbetProm + SSbetMarSize + SSinter) / SStotal
results
tab
results = data.frame(step1 = 0)
#explained variance
SStotal = sum((df$SalesInThousands - GM)^2)
test = lm(df$SalesInThousands ~ df$Promotion, data = df)
tab = anova(test)
results$step1 = tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
results$Promo = SSbetProm / SStotal
test = lm(test$residuals ~ df$MarketSize)
tab = anova(test)
results$step2 = tab$`Sum Sq`[1] / SStotal + results$step1
results$P_MS = (SSbetProm + SSbetMarSize) / SStotal
test = lm(test$residuals ~ df$MarketSize:df$Promotion)
tab = anova(test)
results$step3 = tab$`Sum Sq`[1] / SStotal + results$step2
results$ALL = (SSbetProm + SSbetMarSize + SSinter) / SStotal
results
results = results %>% pivot_longer(cols = names(.),
names_to = 'source',
values_to = 'explained variance')
results = data.frame(step1 = 0)
#explained variance
SStotal = sum((df$SalesInThousands - GM)^2)
test = lm(df$SalesInThousands ~ df$Promotion, data = df)
tab = anova(test)
results$step1 = tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
results$Promo = SSbetProm / SStotal
test = lm(test$residuals ~ df$MarketSize)
tab = anova(test)
results$step2 = tab$`Sum Sq`[1] / SStotal + results$step1
results$P_MS = (SSbetProm + SSbetMarSize) / SStotal
test = lm(test$residuals ~ df$MarketSize:df$Promotion)
tab = anova(test)
results$step3 = tab$`Sum Sq`[1] / SStotal + results$step2
results$ALL = (SSbetProm + SSbetMarSize + SSinter) / SStotal
results = results %>% pivot_longer(cols = names(.),
names_to = 'source',
values_to = 'explained_variance')
results %>% ggplot(aes(x = source, y = explained variance)) +
results %>% ggplot(aes(x = source, y = explained_variance)) +
geom_bar()
results %>% ggplot(aes(color = source, y = explained_variance)) +
geom_bar()
results %>% ggplot(aes(color = source, y = explained_variance)) +
geom_bar(position = 'besides')
results %>% ggplot(aes(color = source, y = explained_variance)) +
geom_bar(stat = "identity", position = "dodge")
results %>% ggplot(aes(x = source, y = explained_variance)) +
geom_bar(stat = "identity", position = "dodge")
results %>%
mutate(source = fct_relevel(source, "step1", 'Promo', 'step2', 'P_MS', 'step3', 'ALL'))
results %>% ggplot(aes(x = source, y = explained_variance)) +
geom_bar(stat = "identity", position = "dodge")
results =results %>%
mutate(source = fct_relevel(source, "step1", 'Promo', 'step2', 'P_MS', 'step3', 'ALL'))
results %>% ggplot(aes(x = source, y = explained_variance)) +
geom_bar(stat = "identity", position = "dodge")
results %>%
kbl(align = 'c', digits = 4) %>%
kable_classic(full_width = F,
font_size = 20)
library(BSDA)
library(pracma)
library(kableExtra)
results %>%
kbl(align = 'c', digits = 4) %>%
kable_classic(full_width = F,
font_size = 20)
test = lm(SalesInThousands ~ Promotion * MarketSize, data = df)
anova(test)
Anova(test, type = 3)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(lme4)
library(kableExtra)
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
temp = df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"]
df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"] = temp -
rnorm(length(temp), 1.5, 30)
min(df$SalesInThousands)
df$SalesInThousands[df$SalesInThousands<0] <- rnorm(sum(df$SalesInThousands<0),
10, 3)
min(df$SalesInThousands)
df$Promotion = as.factor(df$Promotion)
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(~MarketSize)
df %>% ggplot(aes(y = SalesInThousands, color = MarketSize)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df %>% ggplot(aes(x = AgeOfStore, y = SalesInThousands, color = MarketSize)) +
geom_jitter() +
myTheme + brightCol + brightFil
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
group_means <- df %>%
group_by(Promotion) %>%
summarise(
mean_y = mean(SalesInThousands, na.rm = TRUE),
xmin = as.numeric(Promotion[1])-.5,
xmax = as.numeric(Promotion[1])+.5
)
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('Promotion') +
theme(legend.position = 'none')
#step 1:
#how do sales change with different combinations of market size and promotion?
#step 2: There are now multiple sets of null and alternative hypotheses to test
#is there a main effect of market size? Null: no; Alt: yes
#is there a main effect of promotion? Null: no; Alt: yes
#is there an interaction between factors? Null: no; Alt: yes
#step 3: calcualte the F ratios
GM = mean(df$SalesInThousands)
#calculate all the different sums of squares:
#initialize at zero
SSbetMarSize = 0
A = length(unique(df$MarketSize)) #how many levels of market size are there?
dfbetMarSize = A - 1
marSizeLevels = unique(df$MarketSize)
#loop over market sizes:
for(ss in 1:A){
##SS per group = n*(groupMean - GM)^2
tmp = df %>% filter(MarketSize == marSizeLevels[ss])
n = nrow(tmp)
SSbetMarSize = SSbetMarSize + n*(mean(tmp$SalesInThousands) - GM)^2
}
SSbetProm = 0
B = length(unique(df$Promotion)) #how many levels of market size are there?
dfbetProm = B - 1
promLevels = unique(df$Promotion)
#loop over market sizes:
for(pp in 1:B){
##SS per group = n*(groupMean - GM)^2
tmp = df %>% filter(Promotion == promLevels[pp])
n = nrow(tmp)
SSbetProm = SSbetProm + n*(mean(tmp$SalesInThousands) - GM)^2
}
#for the interaction and the within SS values, we'll need to nest two loops!
#SSinter = nab*(meanab - meana - meanb + GM)^2
#needs to loop over levels of factor A and B
SSinter = 0
SSwithin = 0
dfinter = (A-1)*(B-1)
dfwithin = nrow(df) - A*B
#loop over market sizes:
for(ss in 1:A){
for(pp in 1:B){
meana = mean(df$SalesInThousands[df$MarketSize == marSizeLevels[ss]])
meanb = mean(df$SalesInThousands[df$Promotion==promLevels[pp]])
##SS per group = n*(groupMean - GM)^2
tmp = df %>% filter(MarketSize == marSizeLevels[ss],
Promotion == promLevels[pp])
n = nrow(tmp)
SSinter = SSinter + n*(mean(tmp$SalesInThousands) -
meana - meanb + GM)^2
SSwithin = SSwithin + sum((tmp$SalesInThousands -
mean(tmp$SalesInThousands))^2)
}
}
#convert to mean squared values:
MSbetMarSize = SSbetMarSize / dfbetMarSize
MSbetProm = SSbetProm / dfbetProm
MSinter = SSinter / dfinter
MSwithin = SSwithin / dfwithin
#calculate F-ratios:
FbetMarSize = MSbetMarSize / MSwithin
FbetProm = MSbetProm / MSwithin
Finter = MSinter / MSwithin
#steps 4: get p values:
pbetMarSize = 1 - pf(FbetMarSize, dfbetMarSize, dfwithin)
pbetProm = 1 - pf(FbetProm, dfbetProm, dfwithin)
pinter = 1 - pf(Finter, dfinter, dfwithin)
#step 5: answer the question with respect to the null and alt hypotheses:
resPrint <- function(effectName, df, SS, MS, Fval, pval){
cat(effectName, '; Df: ', df, '; SS: ', round(SS, 1),
'; MS: ', round(MS, 1), '; F: ', round(Fval, 3),
'; p(>F): ', pval, sep = '')
}
resPrint('Promotion', dfbetProm, SSbetProm, MSbetProm, FbetProm, pbetProm)
resPrint('MarketSize', dfbetMarSize, SSbetMarSize, MSbetMarSize, FbetMarSize,
pbetMarSize)
resPrint('Interaction', dfinter, SSinter, MSinter, Finter, pinter)
test = lm(SalesInThousands ~ Promotion * MarketSize, data = df)
anova(test)
#The values are a little different?
test = lm(SalesInThousands ~ Promotion * MarketSize, data = df)
anova(test)
df %>% ggplot(aes(x = as.numeric(Promotion),
y = SalesInThousands,
color = Promotion)) +
geom_jitter()+
geom_hline(yintercept = mean(df$SalesInThousands), color = 'red', linetype= 'dashed') +
stat_summary(fun = mean, geom = "crossbar",
width = 0.5, fatten = 2) +
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(.~MarketSize)
results = data.frame(step1 = 0)
#explained variance
SStotal = sum((df$SalesInThousands - GM)^2)
test = lm(df$SalesInThousands ~ df$Promotion, data = df)
tab = anova(test)
results$step1 = tab$`Sum Sq`[1] / sum(tab$`Sum Sq`)
results$Promo = SSbetProm / SStotal
test = lm(test$residuals ~ df$MarketSize)
tab = anova(test)
results$step2 = tab$`Sum Sq`[1] / SStotal + results$step1
results$P_MS = (SSbetProm + SSbetMarSize) / SStotal
test = lm(test$residuals ~ df$MarketSize:df$Promotion)
tab = anova(test)
results$step3 = tab$`Sum Sq`[1] / SStotal + results$step2
results$ALL = (SSbetProm + SSbetMarSize + SSinter) / SStotal
results = results %>% pivot_longer(cols = names(.),
names_to = 'source',
values_to = 'explained_variance')
results =results %>%
mutate(source = fct_relevel(source, "step1", 'Promo', 'step2', 'P_MS', 'step3', 'ALL'))
library(kableExtra)
library(BSDA)
results %>%
kbl(align = 'c', digits = 4) %>%
kable_classic(full_width = F,
font_size = 20)
Anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df), type = 3)
library(car)
Anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df), type = 3)
library(car)
Anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df), type = 3)
Anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df), type = 1)
library(car)
Anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df), type = 3)
anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df))
test = lm(SalesInThousands ~ MarketSize + MarketSize:Promotion, data = df)
df$residuals = test$residuals
df %>% ggplot(aes(y = residuals, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
anova(test)
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df %>% group_by(Promotion, MarketSize) %>% summarize(n = n())
df %>% group_by(Promotion) %>%
summarize(meanVal = mean())
df %>% group_by(Promotion) %>%
summarize(meanVal = mean(residuals))
anova(lm(residuals ~ Promotion, data = df))
test = lm(SalesInThousands ~ MarketSize + MarketSize:Promotion, data = df)
df$residuals = test$residuals
df %>% group_by(Promotion) %>%
summarize(meanVal = mean(residuals))
anova(lm(residuals ~ Promotion, data = df))
anova(test)
anova(lm(residuals ~ Promotion, data = df))
df$residuals = test$residuals
df %>% group_by(Promotion) %>%
summarize(meanVal = mean(residuals))
anova(lm(residuals ~ Promotion, data = df))
test = lm(SalesInThousands ~ MarketSize + MarketSize:Promotion, data = df)
df$residuals = test$residuals
df %>% group_by(Promotion) %>%
summarize(meanVal = mean(residuals))
anova(lm(residuals ~ Promotion, data = df))
library(car)
Anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df), type = 3)
anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df))
anova(lm(SalesInThousands ~ MarketSize + Promotion:MarketSize + Promotion, data = df))
anova(lm(SalesInThousands ~ MarketSize + Promotion:MarketSize, data = df))
anova(lm(SalesInThousands ~ Promotion:MarketSize, data = df))
anova(lm(SalesInThousands ~ MarketSize + Promotion:MarketSize + Promotion, data = df))
anova(lm(SalesInThousands ~ Promotion:MarketSize , data = df))
library(car)
Anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df), type = 3)
anova(lm(SalesInThousands ~ Promotion * MarketSize, data = df))
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
df$Promotion <- as.factor(df$Promotion)
#average over weeks within store
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())+
facet_grid(.~MarketSize)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
# Chunk 2: data
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
df$Promotion <- as.factor(df$Promotion)
#average over weeks within store
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())+
facet_grid(.~MarketSize)
# Chunk 3: two way
test = lm(SalesInThousands ~ Promotion * MarketSize, data = df)
anova(test)
TukeyHSD(aov(test))
tukeyRes = TukeyHSD(aov(test))
tukeyRes$`Promotion:MarketSize`
tukeyRes$`Promotion:MarketSize`$`p adj`
tmp = tukeyRes$`Promotion:MarketSize`
View(tmp)
tmp[,4]
#pvals:
tmp[,4]
tukeyInteractions = tmp[tmp[,4]<.05,]
tukeyPromo = tukeyRes$Promotion
tukeyPromo = tukeyRes$Promotion
tukeyPromo = tukeyPromo[tukeyPromo[,4]<.05,]
TukeyHSD(aov(test))
tukeyRes = TukeyHSD(aov(test))
#let's figure out the structure:
tukeyInteractions = tukeyRes$`Promotion:MarketSize`
#pvals:
tukeyInteractions[,4]
tukeyInteractions = tukeyInteractions[tukeyInteractions[,4]<.05,]
#do the same for the promotion and market size effects:
tukeyPromo = tukeyRes$Promotion
tukeyPromo = tukeyPromo[tukeyPromo[,4]<.05,]
tukeyMarSiz = tukeyRes$MarketSize
tukeyMarSiz = tukeyMarSiz[tukeyMarSiz[,4]<.05,]
#look at all the significant effects:
tukeySig = rbind(tukeyInteractions, tukeyPromo)
#look at all the significant effects:
tukeySig = rbind(tukeyInteractions, tukeyPromo, tukeyMarSiz)
tukeySig
library(kableExtra)
tukeySig %>%
kbl(align = 'c', digits = 4) %>%
kable_classic(full_width = F,
font_size = 20)
tukeySig %>%
kbl(align = 'c', digits = 2) %>%
kable_classic(full_width = F,
font_size = 20)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:/Users/Adam/Documents/GitHub/MasterStatsUsingR/'
library(tidyverse) # data manipulation and visualization
library(pracma)
library(readxl)
library(funspotr)
rmd_files <- list.files(gitHubPath, pattern = "\\.Rmd$", recursive = TRUE, full.names = TRUE)
test = list()
for(ii in 1:length(rmd_files)){
tryCatch(
expr = {
cur = spot_funs(rmd_files[ii])
test[[ii]] = cur
},
error = function(e) {
print(paste0('warning: ', ii))
},
warning = function(w) {
print(paste0('warning: ', ii))
},
finally = {
print(ii)
}
)
}
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:/Users/Adam/Documents/GitHub/MasterStatsUsingR/'
library(tidyverse) # data manipulation and visualization
library(pracma)
library(readxl)
library(funspotr)
rmd_files <- list.files(gitHubPath, pattern = "\\.Rmd$", recursive = TRUE, full.names = TRUE)
test = list()
for(ii in 1:length(rmd_files)){
tryCatch(
expr = {
cur = spot_funs(rmd_files[ii])
test[[ii]] = cur
},
error = function(e) {
print(paste0('warning: ', ii))
},
warning = function(w) {
print(paste0('warning: ', ii))
},
finally = {
print(ii)
}
)
}
combined_df <- bind_rows(test)
# Count occurrences of each function
function_counts <- combined_df %>% group_by(funs, pkgs) %>%
summarize(n = n())
View(function_counts)
