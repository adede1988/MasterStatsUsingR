theme(legend.position = 'none')
probVals
probVals$simRes = 0
probVals
numFlips = 4
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
sample(c(0,1), numFlips, TRUE)
replicate(sample(c(0,1), numFlips, TRUE), 100)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: coin flipping
#what is the probability of flipping heads 5 times in a row?
.5*.5*.5*.5*.5
.5^5
#what is the probability of flipping heads 10 times in a row?
.5^10
#let's make a graph of the probability
# Y axis = probability
# X axis = number of heads in a row
probVals = data.frame(prob = .5^seq(1,8,1),
runLen = seq(1,8,1))
probVals$dummy = as.factor(1)
ggplot(probVals, aes(x = runLen, y = prob, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none')
probVals
probVals$simRes = 0
probVals
numFlips = 4
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sample(c(1,0), numFlips, TRUE)
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
sum(sample(c(1,0), numFlips, TRUE))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
probVals
flips = replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
sum(flips == numFlips) / tries
probVals$simRes = 0
tries = 100
sum(flips == numFlips) / tries
probVals$simRes = 0
tries = 100
for(numFlips in 1:8){
flips = replicate(100, sum(sample(c(1,0), numFlips, TRUE)))
probVals$simRes[numFlips] = sum(flips == numFlips) / tries
}
probVals
longVals <- probVals %>% pivot_longer(cols = c('prob', 'simRes'),
names_to = 'dataType',
values_to = 'prob')
longVals
ggplot(longVals, aes(x = runLen, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(file.path(gitHubPath,
'data','SP500HistoricalData.csv'))
names(df)[6] <- 'Change'
df$Change = unlist(lapply(df$Change,
function(x) as.numeric(strsplit(x, '%')[[1]])))
df$dummy = as.factor(1)
ggplot(df, aes(x = Change, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(-2, 2, .1)) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab('Daily Change (%)') +
geom_vline(xintercept = 0, color = 'red', linewidth = 1.5)
#prob of any positive day?
prob = sum(df$Change > 0) / length(df$Change)
#probability of 2 days in a row with positive change?
prob^2
#probability of 5 days in a row with positive change?
prob^5
for(ii in 1:(length(df$Change)-9)){
for(runLen in 1:10){
if(sum(df$Change[ii:(ii+runLen-1)]>0)==runLen){
RC$count[runLen] = RC$count[runLen] + 1
}
}
}
RC = data.frame(length = seq(1,10,1),
count = rep(0,10), #observed counts in the data
simCount = rep(0,10), #based on random simulation of data
shuffCount = rep(0,10), #based on shuffling the data
multCount = rep(0,10)) #based on multiplication rule
for(ii in 1:(length(df$Change)-9)){
for(runLen in 1:10){
if(sum(df$Change[ii:(ii+runLen-1)]>0)==runLen){
RC$count[runLen] = RC$count[runLen] + 1
}
}
}
RC$count = RC$count / ii
RC$dummy = as.factor(1)
ggplot(RC, aes(x = length, y = count, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
ylab('probability')
for(ii in 1:(length(df$Change)-9)){
for(runLen in 1:10){
if(sum(rbinom(runLen, 1, prob)) == runLen){
RC$simCount[runLen] = RC$simCount[runLen] + 1
}
}
}
RC$simCount = RC$simCount / ii
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
df$shuff = sample(df$Change)
for(ii in 1:(length(df$shuff)-9)){
for(runLen in 1:10){
if(sum(df$shuff[ii:(ii+runLen-1)]>0)==runLen){
RC$shuffCount[runLen] = RC$shuffCount[runLen] + 1
}
}
}
RC$shuffCount = RC$shuffCount / ii
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount', 'shuffCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
df$shuff = sample(df$Change)
for(runLen in 1:10){
RC$multCount[runLen] = prob^runLen
}
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount',
'shuffCount', 'multCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
df$shuff = sample(df$Change)
for(ii in 1:(length(df$shuff)-9)){
for(runLen in 1:10){
if(sum(df$shuff[ii:(ii+runLen-1)]>0)==runLen){
RC$shuffCount[runLen] = RC$shuffCount[runLen] + 1
}
}
}
RC$shuffCount = RC$shuffCount / ii
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount', 'shuffCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
rbinom(3, 1, .4)
rbinom(3, 1, .4)
rbinom(3, 1, .4)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(file.path(gitHubPath,
'data','SP500HistoricalData.csv'))
names(df)[6] <- 'Change'
df$Change = unlist(lapply(df$Change,
function(x)
as.numeric(strsplit(x, '%')[[1]])))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(file.path(gitHubPath,
'data','SP500HistoricalData.csv'))
names(df)[6] <- 'Change'
df$Change = unlist(lapply(df$Change,
function(x)
as.numeric(strsplit(x, '%')[[1]])))
df$dummy = as.factor(1)
ggplot(df, aes(x = Change, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(-2, 2, .1)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none') +
xlab('Daily Change (%)') +
geom_vline(xintercept = 0, color = 'red', linewidth = 1.5)
#prob of any positive day?
prob = sum(df$Change > 0) / length(df$Date)
prob
#probability of 2 days in a row with positive change?
prob^2
#probability of 5 days in a row with positive change?
prob^5
RC = data.frame(length = seq(1,10,1),
count = rep(0,10), #observed counts in the data
simCount = rep(0,10), #based on random simulation of data
shuffCount = rep(0,10), #based on shuffling the data
multCount = rep(0,10)) #based on multiplication rule
#count how often consecutive positive days happen:
for(ii in 1:length(df$Date) -9){
for(rl in 1:10){
if(all(df$Change[ii:(ii+rl)] > 0)){
RC$count[rl] = RC$count[rl] + 1
}
}
}
ii
#count how often consecutive positive days happen:
for(ii in 1:(length(df$Date) -9)){
for(rl in 1:10){
if(all(df$Change[ii:(ii+rl)] > 0)){
RC$count[rl] = RC$count[rl] + 1
}
}
}
View(RC)
RC$dummy = as.factor(1)
ggplot(RC, aes(x = length, y = count, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
ylab('probability')
ii
RC$count = RC$count / ii
RC$dummy = as.factor(1)
ggplot(RC, aes(x = length, y = count, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
ylab('probability')
prob
ii = 10
ii:(ii+rl)
RC$dummy = as.factor(1)
RC$dummy = as.factor(1)
ggplot(RC, aes(x = length, y = count, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
ylab('probability')
prob
ii = 10
rl = 1
ii:(ii+rl)
ii:(ii+rl-1)
RC = data.frame(length = seq(1,10,1),
count = rep(0,10), #observed counts in the data
simCount = rep(0,10), #based on random simulation of data
shuffCount = rep(0,10), #based on shuffling the data
multCount = rep(0,10)) #based on multiplication rule
#count how often consecutive positive days happen:
for(ii in 1:(length(df$Date) -9)){
for(rl in 1:10){
if(all(df$Change[ii:(ii+rl-1)] > 0)){
RC$count[rl] = RC$count[rl] + 1
}
}
}
RC$count = RC$count / ii
RC$dummy = as.factor(1)
ggplot(RC, aes(x = length, y = count, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
ylab('probability')
prob
runLen = 3
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
rbinom(1, runLen, prob)
for(ii in 1:(length(df$Change)-9)){
for(runLen in 1:10){
if(rbinom(1, runLen, prob) == runLen){
RC$simCount[runLen] = RC$simCount[runLen] +1
}
}
}
RC$simCount = RC$simCount / ii
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
sample(df$Change)
df$shufChange = sample(df$Change)
df$shufChange = sample(df$Change)
for(ii in 1:(length(df$Date) -9)){
for(rl in 1:10){
if(all(df$shufChange[ii:(ii+rl-1)] > 0)){
RC$count[rl] = RC$count[rl] + 1
}
}
}
RC$shufChange = RC$shufChange / ii
df$shufChange = sample(df$Change)
for(ii in 1:(length(df$Date) -9)){
for(rl in 1:10){
if(all(df$shufChange[ii:(ii+rl-1)] > 0)){
RC$shuffCount[rl] = RC$shuffCount[rl] + 1
}
}
}
RC$shufChange = RC$shufChange / ii
df$shufChange = sample(df$Change)
for(ii in 1:(length(df$Date) -9)){
for(rl in 1:10){
if(all(df$shufChange[ii:(ii+rl-1)] > 0)){
RC$shuffCount[rl] = RC$shuffCount[rl] + 1
}
}
}
RC$shuffCount = RC$shuffCount / ii
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount',
'shuffCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: sp 500
df = read.csv(file.path(gitHubPath,
'data','SP500HistoricalData.csv'))
names(df)[6] <- 'Change'
df$Change = unlist(lapply(df$Change,
function(x)
as.numeric(strsplit(x, '%')[[1]])))
df$dummy = as.factor(1)
ggplot(df, aes(x = Change, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(-2, 2, .1)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none') +
xlab('Daily Change (%)') +
geom_vline(xintercept = 0, color = 'red', linewidth = 1.5)
# Chunk 3: multiple day runs
#prob of any positive day?
prob = sum(df$Change > 0) / length(df$Date)
#probability of 2 days in a row with positive change?
prob^2
#probability of 5 days in a row with positive change?
prob^5
# Chunk 4: multiple day runs empirical
RC = data.frame(length = seq(1,10,1),
count = rep(0,10), #observed counts in the data
simCount = rep(0,10), #based on random simulation of data
shuffCount = rep(0,10), #based on shuffling the data
multCount = rep(0,10)) #based on multiplication rule
#count how often consecutive positive days happen:
for(ii in 1:(length(df$Date) -9)){
for(rl in 1:10){
if(all(df$Change[ii:(ii+rl-1)] > 0)){
RC$count[rl] = RC$count[rl] + 1
}
}
}
RC$count = RC$count / ii
RC$dummy = as.factor(1)
ggplot(RC, aes(x = length, y = count, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
ylab('probability')
# Chunk 5: multiple day runs simulated
for(ii in 1:(length(df$Change)-9)){
for(runLen in 1:10){
if(rbinom(1, runLen, prob) == runLen){
RC$simCount[runLen] = RC$simCount[runLen] +1
}
}
}
RC$simCount = RC$simCount / ii
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
df$shufChange = sample(df$Change)
for(ii in 1:(length(df$Date) -9)){
for(rl in 1:10){
if(all(df$shufChange[ii:(ii+rl-1)] > 0)){
RC$shuffCount[rl] = RC$shuffCount[rl] + 1
}
}
}
RC$shuffCount = RC$shuffCount / ii
longVals <- RC %>% pivot_longer(cols = c('count', 'simCount',
'shuffCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
RC
prob
prob^seq(1, 10, 1)
RC$multCount = prob^seq(1, 10, 1)
longVals <- RC %>% pivot_longer(cols =
c('count', 'simCount',
'shuffCount', 'multCount'),
names_to = 'dataType',
values_to = 'prob')
ggplot(longVals, aes(x = length, y = prob, color = dataType)) +
geom_line(linewidth = 2) + myTheme + brightCol
