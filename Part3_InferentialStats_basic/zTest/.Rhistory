library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, 'data\\MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
normDat = dnorm(seq(-3,3,.01))
normDat = rnorm(100000)
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 10)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 2)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 2)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 10)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 2)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 10)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 100)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
df = read.csv(paste0(gitHubPath, 'data\\MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
min(df$TargALL_UVSD_d)
max(df$TargALL_UVSD_d)
#basketball player heights
df = data.frame('heights' = c(72,74,76,80,78,73,73,71,78,81,75,75,79,77,79))
#overall distribution of heights statistics:
M = 70
S = 4
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
#basketball player heights
df = data.frame('heights' = c(72,74,76,80,78,73,73,71,78,81,75,75,79,77,79))
#overall distribution of heights statistics:
M = 70
S = 4
dfOverall = data.frame('norm' = dnorm(seq(50,90,1), M, S))
dfOverall$dist = 'overallPop'
df$dist = 'NBA'
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = ..density..), linewidth = 2, bins = 30) +
geom_line(data = dfOverall, aes(x = seq(50,90,1), y = norm), linewidth = 2) +
brightCol +  myTheme
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = ..density..),
linewidth = 2, breaks = seq(50,90,1)) +
geom_line(data = dfOverall,
aes(x = seq(50,90,1), y = norm), linewidth = 2) +
brightCol +  myTheme
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = ..density..),
linewidth = 2, breaks = seq(50,90,2)) +
geom_line(data = dfOverall,
aes(x = seq(50,90,1), y = norm), linewidth = 2) +
brightCol +  myTheme
#z-score players' heights
#BUT z-score them relative to the overall distribution!
df$zscore = (df$heights - M) / S
#What is the probability of each player's height?
df$prob = 1-pnorm(df$zscore)
#it looks like they're all rare, but they're not all THAT rare
df %>% ggplot(aes(x = prob, color = dist, fill = dist)) +
geom_histogram() + myTheme + brightCol + brightFil
#let's use a little m to denote the sample mean as opposed to the population M
m = mean(df$heights)
#What is the probability of the mean height of our sample?
meanProb = 1-pnorm(m, M, S)
prod(df$prob)
samples = 1000
sampSizes = c(1,2,3,4,5,10,15)
simResults = data.frame(meanVal =
rep(0,samples*length(sampSizes)),
sampSize =
rep(0,samples*length(sampSizes)))
ii = 1
simResults$meanVal[ii] = mean(rnorm(sampSize, M,S))
samples = 1000
sampSizes = c(1,2,3,4,5,10,15)
simResults = data.frame(meanVal =
rep(0,samples*length(sampSizes)),
sampSize =
rep(0,samples*length(sampSizes)))
ii = 1
for(sampSize in sampSizes){
print(sampSize)
for(samp in 1:samples){
simResults$meanVal[ii] = mean(rnorm(sampSize, M,S))
simResults$sampSize[ii] = sampSize
ii = ii+1
}
}
#what proportion of sample means
#from the overall distribution are greater
#than the sample mean from our NBA player sample?
outSum = simResults %>% group_by(sampSize) %>%
summarize(prop = sum(meanVal>m)/samples)
outSum$dummy = as.factor(1)
outSum %>% ggplot(aes(x = sampSize, y = prop, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
geom_hline(yintercept = meanProb, color = 'red') +
geom_hline(yintercept = multiProb, color = 'green')
#what if we use the multiplication rule?
multiProb = prod(df$prob)
outSum$dummy = as.factor(1)
outSum %>% ggplot(aes(x = sampSize, y = prop, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
geom_hline(yintercept = meanProb, color = 'red') +
geom_hline(yintercept = multiProb, color = 'green')
simResults$dummy = as.factor(1)
#when the sample size is 15, we never ever observe a sample MEAN as extreme
#as our NBA sample
simResults %>% filter(sampSize == 15) %>%
ggplot(aes(x=meanVal, color = dummy, fill = dummy)) +
geom_histogram() + myTheme + brightCol + brightFil +
geom_vline(xintercept = m, color = 'red', linewidth = 2)
#if the sample size is only 1 person,
#then our NBA sample mean is not so
#extreme
simResults %>% filter(sampSize == 1) %>%
ggplot(aes(x=meanVal, color = dummy, fill = dummy)) +
geom_histogram() + myTheme + brightCol + brightFil +
geom_vline(xintercept = m, color = 'red', linewidth = 2)
outSum = simResults %>% group_by(sampSize) %>%
summarize(prop = sum(meanVal>m)/samples,
sdVal = sd(meanVal),
meanSampleMean = mean(meanVal))
outSum$dummy = as.factor(1)
outSum %>% ggplot(aes(x = sampSize, y = sdVal, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol + ylim(c(0,4))
outSum$dummy = as.factor(1)
outSum %>% ggplot(aes(x = sampSize, y = sdVal, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol
outSum %>% ggplot(aes(x = sampSize, y = meanSampleMean, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol + ylim(c(50,80))
#let's use the sd from our n=15 simulation
1 - pnorm(m, M, outSum$sdVal[outSum$sampSize==15])
multiProb
meanProb
#z-score players' heights
#BUT z-score them relative to the overall distribution!
df$zscore =
#What is the probability of each player's height?
df$prob =
#it looks like they're all rare, but they're not all THAT rare
df %>% ggplot(aes(x = prob, color = dist, fill = dist)) +
geom_histogram() + myTheme + brightCol + brightFil
df %>% ggplot(aes(x = prob, color = dist, fill = dist)) +
geom_histogram() + myTheme + brightCol + brightFil
outSum %>% ggplot(aes(x = sampSize, y = prop, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none') +
geom_hline(yintercept = meanProb, color = 'red') +
geom_hline(yintercept = multiProb, color = 'green')
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
#basketball player heights
df = data.frame('heights' = c(72,74,76,80,78,73,73,71,78,81,75,75,79,77,79))
#overall distribution of heights statistics:
M = 70
S = 4
dfOverall = data.frame('norm' = dnorm(seq(50,90,1), M, S))
dfOverall$dist = 'overallPop'
View(df)
View(dfOverall)
df$dist = 'NBA'
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme +
geom_line(dfOverall, aes(x = seq(50,90,1), y = norm,
color = dist))
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme +
geom_line(dfOverall, aes(x = seq(50, 90, 1), y = norm))
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme +
geom_line(data = dfOverall, aes(x = seq(50, 90, 1), y = norm))
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme +
geom_line(data = dfOverall, aes(x = seq(50,90,1),
y = norm),
linewidth = 2)
#z-score players' heights
#BUT z-score them relative to the overall distribution!
df$zscore = (df$heights - M) / S
#What is the probability of each player's height?
df$prob = 1 - pnorm(df$zscore)
df %>% ggplot(aes(x = prob, color = dist, fill = dist)) +
geom_histogram() + myTheme + brightCol + brightFil
#let's use a little m to denote the sample mean as opposed to the population M
m = mean(df$heights)
#What is the probability of the mean height of our sample?
meanProb = 1 - pnorm(m, M, S)
meanProb
#what if we use the multiplication rule?
multiProb = prod(df$prob)
multiProb
samples = 1000
sampSizes = c(1,2,3,4,5,10,15)
simResults = data.frame(meanVal =
rep(0,samples*length(sampSizes)),
sampSize =
rep(0,samples*length(sampSizes)))
View(simResults)
samples = 1000
sampSizes = c(1,2,3,4,5,10,15)
simResults = data.frame(meanVal =
rep(0,samples*length(sampSizes)),
sampSize =
rep(0,samples*length(sampSizes)))
ii = 1
for(sampSize in sampSizes){
for(jj in 1:samples){
simResults$meanVal[ii] = mean(rnorm(sampSize, M, S))
simResults$sampSize[ii] = sampSize
ii = ii + 1
}
}
#what proportion of sample means
#from the overall distribution are greater
#than the sample mean from our NBA player sample?
outSum = simResults %>% group_by(sampSize) %>%
summarize(prop = sum(meanVal > m))
View(outSum)
#what proportion of sample means
#from the overall distribution are greater
#than the sample mean from our NBA player sample?
outSum = simResults %>% group_by(sampSize) %>%
summarize(prop = sum(meanVal > m) / samples)
outSum$dummy = as.factor(1)
outSum %>% ggplot(aes(x = sampSize, y = prop, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none')
simResults$dummy = as.factor(1)
#n=15 simulation results:
simResults %>% filter(sampSize == 15 ) %>%
ggplot(aes(x = meanVal))  +
geom_histogram() + myTheme + brightCol + brightFil
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: data
#basketball player heights
df = data.frame('heights' = c(72,74,76,80,78,73,73,71,78,81,75,75,79,77,79))
#overall distribution of heights statistics:
M = 70
S = 4
# Chunk 3: visualization
dfOverall = data.frame('norm' = dnorm(seq(50,90,1), M, S))
dfOverall$dist = 'overallPop'
df$dist = 'NBA'
df %>% ggplot(aes(x = heights, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, breaks = seq(50,90,1)) +
brightCol +  myTheme +
geom_line(data = dfOverall, aes(x = seq(50,90,1),
y = norm),
linewidth = 2)
# Chunk 4: individual probs
#z-score players' heights
#BUT z-score them relative to the overall distribution!
df$zscore = (df$heights - M) / S
#What is the probability of each player's height?
df$prob = 1 - pnorm(df$zscore)
df %>% ggplot(aes(x = prob, color = dist, fill = dist)) +
geom_histogram() + myTheme + brightCol + brightFil
# Chunk 5: sample probability
#let's use a little m to denote the sample mean as opposed to the population M
m = mean(df$heights)
#What is the probability of the mean height of our sample?
meanProb = 1 - pnorm(m, M, S)
#what if we use the multiplication rule?
multiProb = prod(df$prob)
# Chunk 6: simulate samples
samples = 1000
sampSizes = c(1,2,3,4,5,10,15)
simResults = data.frame(meanVal =
rep(0,samples*length(sampSizes)),
sampSize =
rep(0,samples*length(sampSizes)))
ii = 1
for(sampSize in sampSizes){
for(jj in 1:samples){
simResults$meanVal[ii] = mean(rnorm(sampSize, M, S))
simResults$sampSize[ii] = sampSize
ii = ii + 1
}
}
#what proportion of sample means
#from the overall distribution are greater
#than the sample mean from our NBA player sample?
outSum = simResults %>% group_by(sampSize) %>%
summarize(prop = sum(meanVal > m) / samples)
outSum$dummy = as.factor(1)
outSum %>% ggplot(aes(x = sampSize, y = prop, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
theme(legend.position = 'none')
simResults$dummy = as.factor(1)
#n=15 simulation results:
simResults %>% filter(sampSize == 15, color = dummy) %>%
ggplot(aes(x= meanVal))  +
geom_histogram() + myTheme + brightCol + brightFil
#n=15 simulation results:
simResults %>% filter(sampSize == 15) %>%
ggplot(aes(x= meanVal,  color = dummy))  +
geom_histogram() + myTheme + brightCol + brightFil
#n=15 simulation results:
simResults %>% filter(sampSize == 15) %>%
ggplot(aes(x= meanVal,  color = dummy))  +
geom_histogram() + myTheme + brightCol + brightFil +
geom_vline(xintercept = m, color = 'red')
#n=1 simulation results:
simResults %>% filter(sampSize == 1) %>%
ggplot(aes(x= meanVal,  color = dummy))  +
geom_histogram() + myTheme + brightCol + brightFil +
geom_vline(xintercept = m, color = 'red')
#how does variability and central tendency change?
outSum = simResults %>% group_by(sampSize) %>%
summarize(prop = sum(meanVal > m) / samples,
sdVal = sd(meanVal),
meanVal = mean(meanVal))
outSum$dummy = as.factor(1)
outSum %>% ggplot(aes(x = sampSize, y = sdVal, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol
outSum %>% ggplot(aes(x = sampSize, y = meanVal, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol
outSum %>% ggplot(aes(x = sampSize, y = meanVal, color = dummy)) +
geom_line(linewidth = 2) + myTheme + brightCol +
ylim(c(60, 90))
1 - pnorm(m, M, outSum$sdVal[7])
#the probabilities we calculated before:
multiProb
meanProb
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
#basketball player heights
df = data.frame('heights' = c(72,74,76,80,78,73,73,71,78,81,75,75,79,77,79))
n = length(df$heights)
#step 2:
#       NULL:
M = 70
S = 4
#step 3:
#       ALPHA:
alpha = .05
#       critical z value:
critVal = abs(qnorm(alpha/2))
#step 4:
m = mean(df$heights)
n = length(df$heights)
sampleZ = (m - M) / (S/sqrt(n))
sampleZ
#step 5:
if (sampleZ>critVal | sampleZ< -critVal){
print('mean value is more extreme than critical threshold!')
} else {
print('mean value is not more extreme than critical threshold!')
}
z.test(df$heights, mu = M, sigma.x = S)
library(BSDA)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(BSDA)
library(BSDA)
library(BSDA)
library(pracma)
#basketball player heights
df = data.frame('heights' = c(72,74,76,80,78,73,73,71,78,81,75,75,79,77,79))
#       critical z value:
critVal = abs(qnorm(alpha/2))
#step 3:
#       ALPHA:
alpha = .05
#       critical z value:
critVal = abs(qnorm(alpha/2))
critVal
#step 4 calculate the observed value:
m = mean(df$heights)
n = length(df$heights)
sampleZ = (m - M) / (S/sqrt(n))
#step 2:
#       NULL:
M = 70
S = 4
sampleZ = (m - M) / (S/sqrt(n))
sampleZ
#step 5:
if (sampleZ>critVal | sampleZ< -critVal){
print('mean value is more extreme than critical threshold!')
} else {
print('mean value is not more extreme than critical threshold!')
}
sampleZ
critVal
z.test(df$heights, mu = M, sigma.x = S)
1 - pnorm(sampleZ)
(1 - pnorm(sampleZ))*2
