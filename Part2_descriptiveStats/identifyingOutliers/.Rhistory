# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
EEGdat = read.csv(file.path(gitHubPath, 'data'.
EEGdat = read.csv(file.path(gitHubPath, 'data',
'restingEEG.csv'))
EEGdat$dummy = as.factor(1)
#plot the overall histogram
ggplot(EEGdat, aes(x = pow_delta_O, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
#this is the range of data that we worked with in the previous project:
ggplot(EEGdat, aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(0,250,.5)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
#this is the range of data that we worked with in the previous project:
ggplot(EEGdat, aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(0,250,1)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
#this is the range of data that we worked with in the previous project:
ggplot(EEGdat, aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(0,250,1)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
#now calculate the modified z score
#using the median absolute deviation
medianVal = median(EEGdat$pow_delta_O)
madVal = mad(EEGdat$pow_delta_O)
modZ = (EEGdat$pow_delta_O - medianVal) /
madVal
#how many observations are outliers now?
sum(abs(modZ)>3) / length(modZ)
#replot it
EEGdat %>% filter(modZ<3) %>%
ggplot(aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
normZ = (EEGdat$pow_delta_O - mean(EEGdat$pow_delta_O)) /
sd(EEGdat$pow_delta_O)
zscores = data.frame(norm = normZ, mod = EEGdat$modZ)
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = norm, y = mod)) +
geom_point() +
ylim(c(-2, 30)) +
xlim(c(-.0252, -.022))
normZ = (EEGdat$pow_delta_O - mean(EEGdat$pow_delta_O)) /
sd(EEGdat$pow_delta_O)
zscores = data.frame(norm = normZ, mod = EEGdat$modZ)
EEGdat$modZ
EEGdat$modZ
EEGdat$modZ
#now calculate the modified z score
#using the median absolute deviation
medianVal = median(EEGdat$pow_delta_O)
madVal = mad(EEGdat$pow_delta_O)
EEGdat$modZ = (EEGdat$pow_delta_O - medianVal) /
madVal
#how many observations are outliers now?
sum(abs(EEGdat$modZ)>3) / length(EEGdat$modZ)
EEGdat$modZ
#replot it
EEGdat %>% filter(modZ<3) %>%
ggplot(aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
EEGdat$modZ
normZ = (EEGdat$pow_delta_O - mean(EEGdat$pow_delta_O)) /
sd(EEGdat$pow_delta_O)
zscores = data.frame(norm = normZ, mod = EEGdat$modZ)
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = norm, y = mod)) +
geom_point() +
ylim(c(-2, 30)) +
xlim(c(-.0252, -.022))
ggplot(zscores, aes(x = norm, y = mod)) +
geom_point()
ggplot(zscores, aes(x = norm, y = mod)) +
geom_point() +
ylim(c(-2, 30))
ggplot(zscores, aes(x = norm, y = mod)) +
geom_point() +
ylim(c(-2, 30)) +
xlim(c(-.0252, -.022))
#plot again but this time with different colors for the z-score types:
zscores$idx = c(1:length(normZ))
zscoresLong <- pivot_longer(zscores, cols = -c(idx),
names_to = 'type',
values_to = 'z')
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol +
ylim(c(-1, 10))
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol
#import the country garbage data set and visualize the totalPop variable:
wasteDat = read.csv(file.path(gitHubPath, 'data',
'plasticWaste.csv'))
#first plot the histogram of country total populations
wasteDat$dummy = as.factor(1)
wasteDat %>% ggplot(aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
#calculate the z scores normal and modified
normZ = (wasteDat$totalPop - mean(wasteDat$totalPop)) / sd(wasteDat$totalPop)
modZ = (wasteDat$totalPop - median(wasteDat$totalPop)) / mad(wasteDat$totalPop)
#What proportion of the data are being called outliers with each method?
sum(abs(modZ)>3) / length(wasteDat$totalPop)
sum(abs(normZ)>3) / length(wasteDat$totalPop)
#plot the histogram with the outliers removed
ggplot(wasteDat[abs(modZ)<3,], aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil + theme(legend.position = 'none')
ggplot(wasteDat[abs(normZ)<3,],
aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
View(wasteDat)
#calculate the z scores normal and modified
wasteDat$normZ =
(wasteDat$totalPop - mean(wasteDat$totalPop)) / sd(wasteDat$totalPop)
wasteDat$modZ =
(wasteDat$totalPop - median(wasteDat$totalPop)) / mad(wasteDat$totalPop)
#What proportion of the data are being called outliers with each method?
sum(abs(wasteDat$modZ)>3) / length(wasteDat$totalPop)
sum(abs(wasteDat$normZ)>3) / length(wasteDat$totalPop)
#plot the histogram with the outliers removed
wasteDat %>% filter(abs(modZ)< 3) %>%
ggplot(aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
wasteDat %>% filter(abs(normZ)< 3) %>%
ggplot(aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
# let's do some plotting to look at the two types of z-score
zscores = select(wasteDat, normZ, modZ)
View(zscores)
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = norm, y = mod)) +
geom_point()
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = normZ, y = modZ)) +
geom_point()
dim(zscores)
zscoresLong <- pivot_longer(zscores, cols = -c(idx),
names_to = 'type',
values_to = 'z')
#plot again but this time with different colors for the z-score types:
zscores$idx = c(1:dim(zscores)[1])
zscoresLong <- pivot_longer(zscores, cols = -c(idx),
names_to = 'type',
values_to = 'z')
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol +
ylim(c(-1,10))
memDat = read.csv(paste0(gitHubPath, 'data',
'MemoryData.csv'))
#first plot the histogram of country total populations
memDat$dummy = as.factor(1)
memDat %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
memDat = read.csv(file.path(gitHubPath, 'data',
'MemoryData.csv'))
#first plot the histogram of country total populations
memDat$dummy = as.factor(1)
memDat %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
#calculate the z scores normal and modified
memDat$normZ =
(memDat$TargALL_UVSD_d - mean(memDat$TargALL_UVSD_d)) /
sd(memDat$TargALL_UVSD_d )
memDat$modZ =
(memDat$TargALL_UVSD_d - median(memDat$TargALL_UVSD_d)) /
mad(memDat$TargALL_UVSD_d)
#What proportion of the data are being called outliers with each method?
sum(abs(memDat$modZ)>3) / dim(memDat)[1]
sum(abs(memDat$normZ)>3) / dim(memDat)[1]
#plot the histogram with the outliers removed
memDat %>% filter(abs(modZ)<3) %>%
ggplot(aes(x = TargALL_UVSD_d,
color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
memDat %>% filter(abs(normZ)<3) %>%
ggplot(aes(x = TargALL_UVSD_d,
color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
# let's do some plotting to look at the two types of z-score
zscores = select(memDat, normZ, modZ)
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = normZ, y = modZ)) +
geom_point()
#plot again but this time with different colors for the z-score types:
zscores$idx = c(1:dim(memDat)[1])
zscoresLong <- pivot_longer(zscores, cols = -c(idx),
names_to = 'type',
values_to = 'z')
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
#load in the restingEEG dataset.
#Key variable name: pow_delta_O
EEGdat = read.csv(file.path(gitHubPath, 'data',
'restingEEG.csv'))
EEGdat$dummy = as.factor(1)
#plot the overall histogram
ggplot(EEGdat, aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
#this is the range of data that we worked with in the previous project:
ggplot(EEGdat, aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(0,250,1)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
EEGdat$modZ = (EEGdat$pow_delta_O - medianVal) / madVal
#now calculate the modified z score
#using the median absolute deviation
medianVal = median(EEGdat$pow_delta_O)
madVal = mad(EEGdat$pow_delta_O)
EEGdat$modZ = (EEGdat$pow_delta_O - medianVal) / madVal
#how many observations are outliers now?
sum(EEGdat$modZ > 3)
#how many observations are outliers now?
sum(EEGdat$modZ > 3) / dim(EEGdat)[1]
#replot it
EEGdat %>% filter(modZ<3) %>%
ggplot(aes(x = pow_delta_O,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
EEGdat$normZ =
(EEGdat$pow_delta_O - mean(EEGdat$pow_delta_O)) /
sd(EEGdat$pow_delta_O)
EEGdat$normZ =
(EEGdat$pow_delta_O - mean(EEGdat$pow_delta_O)) /
sd(EEGdat$pow_delta_O)
zscores = select(EEGdat, modZ, normZ)
ggplot(zscores, aes(x = normZ, y = modZ)) +
geom_point()
ggplot(zscores, aes(x = normZ, y = modZ)) +
geom_point() +
ylim(c(-2, 30)) +
xlim(c(-.0252, -.022))
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = normZ, y = modZ)) +
geom_point() +
ylim(c(-2, 30)) +
xlim(c(-.0252, -.022))
#plot again but this time with different colors for the z-score types:
zscores$idx = 1:dim(zscores)[1]
zscoresLong <- pivot_longer(zscores, cols = -c(idx),
names_to = 'type',
values_to = 'z')
View(zscores)
View(zscores)
View(zscoresLong)
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol +
ylim(c(-1, 10))
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol
#import the country garbage data set and visualize the totalPop variable:
wasteDat = read.csv(file.path(gitHubPath, 'data',
'plasticWaste.csv'))
names(wasteDat)
#first plot the histogram of country total populations
wasteDat$dummy = as.factor(1)
wasteDat %>% ggplot(aes(x = totalPop,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
#calculate the z scores normal and modified
wasteDat$normZ = (wasteDat$totalPop - mean(wasteDat$totalPop)) /
sd(wasteDat$totalPop)
wasteDat$modZ = (wasteDat$totalPop - median(wasteDat$totalPop))/
mad(wasteDat$totalPop)
#What proportion of the data are being called outliers with each method?
sum(abs(wasteDat$modZ) > 3)
sum(abs(wasteDat$normZ) > 3)
#plot the histogram with the outliers removed
wasteDat %>% filter(abs(modZ)>3) %>%
ggplot(aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
#plot the histogram with the outliers removed
wasteDat %>% filter(abs(modZ)<3) %>%
ggplot(aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
wasteDat %>% filter(abs(normZ)<3)%>%
ggplot(aes(x = totalPop, color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
View(wasteDat)
View(wasteDat)
# let's do some plotting to look at the two types of z-score
zscores = select(wasteDat, normZ, modZ)
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = normZ, y = modZ)) +
geom_point()
#plot again but this time with different colors for the z-score types:
zscores$idx = 1:dim(wasteDat)[1]
zscoresLong <- pivot_longer(zscores, cols = -c(idx),
names_to = 'type',
values_to = 'z')
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol +
ylim(c(-1,10))
memDat = read.csv(file.path(gitHubPath, 'data',
'MemoryData.csv'))
#first plot the histogram of country total populations
memDat$dummy = as.factor(1)
memDat %>% ggplot(aes(x = TargALL_UVSD_d,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
memDat$modZ =
(memDat$TargALL_UVSD_d - median(memDat$TargALL_UVSD_d)) /
mad(memDat$TargALL_UVSD_d)
#calculate the z scores normal and modified
memDat$normZ =
(memDat$TargALL_UVSD_d - mean(memDat$TargALL_UVSD_d)) /
sd(memDat$TargALL_UVSD_d)
#What proportion of the data are being called outliers with each method?
sum(memDat$normZ > 3)
#What proportion of the data are being called outliers with each method?
sum(abs(memDat$normZ) > 3)
sum(abs(memDat$modZ) > 3)
#plot the histogram with the outliers removed
memDat %>% filter(abs(normZ)<3) %>%
ggplot(aes(x =TargALL_UVSD_d ,
color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
memDat %>% filter(abs(modZ)<3)%>%
ggplot(aes(x = TargALL_UVSD_d,
color = dummy, fill = dummy)) +
geom_histogram()+
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
# let's do some plotting to look at the two types of z-score
zscores = select(memDat, modZ, normZ)
#plot the two types of z-score against each other to see how they relate
ggplot(zscores, aes(x = normZ, y = modZ)) +
geom_point()
#plot again but this time with different colors for the z-score types:
zscores$idx = 1:dim(memDat)[1]
zscoresLong <- pivot_longer(zscores, cols = -c(idx),
names_to = 'type',
values_to = 'z')
ggplot(zscoresLong, aes(x = idx, y = z, color = type)) +
geom_point(size = 2) + myTheme + brightCol
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
#import the country garbage data set:
wasteDat = read.csv(file.path(gitHubPath, 'data',
'plasticWaste.csv'))
#first plot the histogram of country total populations
wasteDat$dummy = as.factor(1)
wasteDat %>% ggplot(aes(x = mismanagedTotal, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
wasteDat %>% ggplot(aes(x = totalPop, y = mismanagedTotal, color = dummy, fill = dummy)) +
geom_point() +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
#divide the total waste by the total population
wasteDat %>% ggplot(aes(x = mismanagedTotal/totalPop,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
EEGdat = read.csv(file.path(gitHubPath, 'data',
'restingEEG.csv'))
EEGdat$dummy = as.factor(1)
vars = names(EEGdat)
vars = vars[grepl("_O", vars)]
EEGdat$normPow = EEGdat$pow_delta_O / rowSums(EEGdat[,vars])
ggplot(EEGdat, aes(x = normPow, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
min(rowSums(EEGdat[,vars]))
z = (EEGdat$normPow - mean(EEGdat$normPow)) / sd(EEGdat$normPow)
max(z)
EEGdat = EEGdat%>% filter(!is.na(EEGdat$normPow))
z = (EEGdat$normPow - mean(EEGdat$normPow)) / sd(EEGdat$normPow)
max(z)
sum(Z>3)
sum(z>3)
names(EEGdat)
EEGdat = read.csv(file.path(gitHubPath, 'data',
'restingEEG.csv'))
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
#import the country garbage data set:
wasteDat = read.csv(file.path(gitHubPath, 'data',
'plasticWaste.csv'))
names(wasteDat)
#first plot the histogram of country total mismanaged waste
wasteDat$dummy = as.factor(1)
wasteDat %>% ggplot(aes(x = mismanagedTotal,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
wasteDat %>% ggplot(aes(x = totalPop,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
wasteDat %>% ggplot(aes(x = mismanagedTotal, y = totalPop,
color = dummy, fill = dummy)) +
geom_point() +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
#divide the total waste by the total population
wasteDat %>% ggplot(aes(x =  mismanagedTotal / totalPop ,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
wasteDat %>% ggplot(aes(x =  mismanagedTotal / totalPop ,
y = mismanagedTotal,
color = dummy, fill = dummy)) +
geom_point() +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
EEGdat = read.csv(file.path(gitHubPath, 'data',
'restingEEG.csv'))
EEGdat$dummy = as.factor(1)
#which variables are from the Occipital region
vars = names(EEGdat)
vars
vars = grepl('_O', vars)
vars
#which variables are from the Occipital region
vars = names(EEGdat)
vars = vars[grepl('_O', vars)]
vars
EEGdat$normPow = EEGdat$pow_delta_O /
row.sums(EEGdat[,vars])
EEGdat$dummy = as.factor(1)
#which variables are from the Occipital region
vars = names(EEGdat)
vars = vars[grepl('_O', vars)]
vars
EEGdat$normPow = EEGdat$pow_delta_O /
rowSums(EEGdat[,vars])
ggplot(EEGdat, aes(x = normPow,
color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol +
theme(legend.position = 'none')
