gitHubPath = 'C:/Users/Adam/Documents/GitHub/MasterStatsUsingR/'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(readxl)
#Key variable name: pow_delta_O
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
spearCor = function(x, y){
rX = rank(x)
rY = rank(y)
d = rX - rY
n = length(x)
rs = 1 - (6*sum(d^2)) / (n*(n^2 - 1))
return(rs)
}
ggplot(df, aes(x = rank(age), y = rank(log(pow_delta_O,10)), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("age (months)")
ggplot(df, aes(x = rank(age), y = rank(log(pow_delta_O,10)), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("age (months)")
ageCut = seq(12,1000,12)
ageVals = df$age
powVals = log(df$pow_delta_O)
results = data.frame(cutOff = ageCut,
corVal = rep(0, length(ageCut)))
for(ii in 1:length(ageCut)){
results$corVal[ii] = spearCor(powVals[ageVals<ageCut[ii]],
ageVals[ageVals<ageCut[ii]])
}
ggplot(results, aes(x = cutOff, y = corVal)) +
geom_line(color = 'green') +
myTheme + brightFil + brightCol +
xlab("cut off age (months)")
results = data.frame(cutOff = ageCut,
personCor = rep(0, length(ageCut)),
spearCor  = rep(0, length(ageCut)))
for(ii in 1:length(ageCut)){
results$spearCor[ii] = spearCor(powVals[ageVals<ageCut[ii]],
ageVals[ageVals<ageCut[ii]])
results$personCor[ii] = cor(powVals[ageVals<ageCut[ii]],
ageVals[ageVals<ageCut[ii]])
}
ggplot(results, aes(x = cutOff, y = personCor)) +
geom_line(color = 'green') +
geom_line(aes(y = spearCor), color = 'red') +
myTheme +
xlab("cut off age (months)")
ggplot(df, aes(x = rank(age), y = rank(log(pow_delta_O,10)), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("age (months)")
ggplot(df, aes(x = rank(age), y = rank(log(pow_delta_O,10)), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("rank( age (months) )")
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("age (months)")
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("age (months)")
ggplot(df, aes(x = rank(age), y = rank(log(pow_delta_O,10)), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("rank( age (months) )")
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("age (months)")
ggplot(df, aes(x = rank(age), y = rank(log(pow_delta_O,10)), color = dummy)) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1),
color = "green", se = FALSE) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab("rank( age (months) )")
ggplot(results, aes(x = cutOff, y = personCor)) +
geom_line(color = 'green') +
geom_line(aes(y = spearCor), color = 'red') +
myTheme +
xlab("cut off age (months)")
ggplot(results, aes(x = cutOff, y = personCor)) +
geom_line(color = 'green', linewidth = 2) +
geom_line(aes(y = spearCor), color = 'red') +
myTheme +
xlab("cut off age (months)")
ggplot(results, aes(x = cutOff, y = personCor)) +
geom_line(color = 'green', linewidth = 2) +
geom_line(aes(y = spearCor), color = 'red', linewidth = 2) +
myTheme +
xlab("cut off age (months)")
resLong = pivot_longer(results, cols = c('personCor', 'spearCor'),
names_to = 'corType',
values_to = 'cor')
ggplot(resLong, aes(x = cutOff, y = cor, color = corType)) +
geom_line(linewidth = 2) +
myTheme + brightCol +
xlab("cut off age (months)")
allMurders = read.csv(file.path(gitHubPath,
'data/',
'murderDatCombined_iceCream.csv'))
View(allMurders)
months = c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
allMurders = read.csv(file.path(gitHubPath,
'data/',
'murderDatCombined.csv'))
allMurders %>% group_by(YEAR,MONTH) %>%
summarize(murders = n()) -> allMurders
allMurders$dummy = as.factor(1)
View(allMurders)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:/Users/Adam/Documents/GitHub/MasterStatsUsingR/'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(readxl)
#https://www.nyc.gov/site/nypd/stats/reports-analysis/homicide.page
murderFiles = list.files(paste0(gitHubPath, 'data/murderFiles'))
start = T
for(file in murderFiles){
curDat = read_excel(paste0(gitHubPath, 'data/murderFiles/', file))
year = as.numeric(strsplit(strsplit(file, 'cy')[[1]][2],
'.xlsx')[[1]][1])
if(start){
nameVals = unlist(curDat[4,])
curDat = curDat[,!is.na(nameVals)]
nameVals = nameVals[!is.na(nameVals)]
} else {
temp = unlist(curDat[4,])
#this code is used to debug when a format change was found:
# temp_lower <- tolower(temp)
# nameVals_lower <- tolower(nameVals)
#
# # Identify items in temp but not in nameVals
# only_in_temp <- setdiff(temp_lower, nameVals_lower)
#
# # Identify items in nameVals but not in temp
# only_in_nameVals <- setdiff(nameVals_lower, temp_lower)
curDat = curDat[,!is.na(temp) ]
temp = temp[!is.na(temp)]
temp_lower <- tolower(temp)
curDat = curDat[,temp_lower != 'victim birth date' &
temp_lower != 'perp victim relationship']
}
curDat = curDat[-c(1,2,3,4),]
names(curDat) = nameVals
curDat$DATE = as.Date(as.numeric(curDat$DATE), origin = "1899-12-30")
curDat = curDat[!is.na(curDat$DATE),]
curDat$YEAR = year
curDat$MONTH = as.numeric(curDat$MONTH)
if(start){
allMurders = curDat
start = F
} else {
allMurders = rbind(allMurders, curDat)
}
}
#save out all the compiled murder data:
write.csv(allMurders, file.path(gitHubPath,
'data/',
'murderDatCombined.csv'))
View(allMurders)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:/Users/Adam/Documents/GitHub/MasterStatsUsingR/'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(readxl)
#Key variable name: pow_delta_O
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
View(df)
test = cor(df)
test = select(df, is.numeric(df))
apply(df, 1, is.numeric)
apply(df, 2, is.numeric)
str(df)
sapply(df, is.numeric)
select(df, sapply(df, is.numeric))
select(df, names(df)[sapply(df, is.numeric)])
cor(select(df, names(df)[sapply(df, is.numeric)]))
cor(select(df, names(df)[sapply(df, is.numeric)])) -> test
# Install if necessary
install.packages("corrplot")
# Load package
library(corrplot)
# Compute correlation matrix
cor_matrix <- cor(select(df, names(df)[sapply(df, is.numeric)]))
# Plot
corrplot(cor_matrix, method = "color", type = "lower", tl.cex = 0.8)
View(cor_matrix)
View(cor_matrix)
View(cor_matrix)
~ grepl("pow", colnames(df))
grepl("pow", colnames(df))
# Compute correlation matrix
cor_matrix <- cor(select(df, colnames(df)[grepl("pow", colnames(df))]))
# Plot
corrplot(cor_matrix, method = "color", type = "lower", tl.cex = 0.8)
names(cor_matrix)
colnames(cor_matrix)
freq_region_df <- data.frame(
variable = rownames(cor_matrix),
freq = str_extract(rownames(cor_matrix), "(?<=pow_)[^_]+"),
region = str_extract(rownames(cor_matrix), "(?<=_)[^_]+")
)
View(freq_region_df)
freq_region_df <- data.frame(
variable = rownames(cor_matrix),
freq = str_extract(rownames(cor_matrix), "(?<=pow_)[^_]+"),
region = str_extract(rownames(cor_matrix), "(?<=_)[A-Za-z]+$")
)
str_split(rownames(cor_matrix), "_")
splitNames = str_split(rownames(cor_matrix), "_")
lapply(splitNames, ~ x[[2]])
freq_region_df <- data.frame(
variable = rownames(cor_matrix),
freqs = sapply(splitNames, function(x) x[2]),
region = sapply(splitNames, function(x) x[3])
)
#regional summary:
regCor = cor_matrix %>% group_by(freq_region_df$region) %>%
summarize(meanCor = mean())
cor_matrix$reg = freq_region_df$region
View(cor_matrix)
# Compute correlation matrix
cor_matrix <- cor(select(df, colnames(df)[grepl("pow", colnames(df))]))
unique(freq_region_df$freqs)
# unique frequencies and regions
freq_order <- unique(freq_region_df$freqs)
region_order <- unique(freq_region_df$region)
#reorder by region:
freq_region_df <- freq_region_df %>%
mutate(region = factor(region, levels = region_order)) %>%
arrange(region)
# Extract new ordering
new_order <- match(freq_region_df$variable, rownames(cor_matrix))
# Reorder the correlation matrix
cor_matrix_sorted <- cor_matrix[new_order, new_order]
# Plot
corrplot(cor_matrix_sorted, method = "color", type = "lower", tl.cex = 0.8)
names(cor_matrix)
rownames(cor_matrix)
rownames(cor_matrix_sorted) = freq_region_df$region
colnames(cor_matrix_sorted) = freq_region_df$region
# Plot
corrplot(cor_matrix_sorted, method = "color", type = "lower", tl.cex = 0.8)
splitNames = str_split(rownames(cor_matrix), "_")
freq_region_df <- data.frame(
variable = rownames(cor_matrix),
freqs = sapply(splitNames, function(x) x[2]),
region = sapply(splitNames, function(x) x[3])
)
cor_df <- as.data.frame(cor_matrix)
# Add region labels
cor_df$Region <- freq_region_df$region
# Compute mean correlation for each region
region_means <- aggregate(. ~ Region, data = cor_df, mean)
View(region_means)
# Compute mean correlation for each region
region_means <- aggregate(Region ~ Region, data = cor_df, mean)
cor_df <- as.data.frame(cor_matrix)
# Add region labels
cor_df$Region <- freq_region_df$region
# Compute mean correlation for each region
region_means <- aggregate(Region ~ Region, data = cor_df, mean)
long_df <- expand.grid(Row_Region = freq_region_df$region,
Col_Region = freq_region_df$region)
long_df$Correlation <- as.vector(cor_matrix)
View(long_df)
head(long_df)
long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean())
long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(.
))
long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(Correlation))
reg_df = long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(Correlation))
sqwrt(169)
sqrt(169)
names(reg_df)
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal)
View(reg_df)
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
reg_df %>% select(-'Row_region')
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
reg_df %>% select(-c('Row_region'))
reg_df %>% select(-c('Row_region'))
reg_df %>% select(-c('Row_Region'))
reg_df %>% select(-c('Row_Region'))
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
select(-Row_Region)
reg_df = long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(Correlation))
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
select(-Row_Region)
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Region)  # Remove Row_Region
reg_df = long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(Correlation))
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Region)  # Remove Row_Region
corrplot(as.matrix(reg_df), method = "color", type = "lower", tl.cex = 0.8)
rownames(reg_df) = colnames(reg_df)
corrplot(as.matrix(reg_df), method = "color", type = "lower", tl.cex = 0.8)
long_df <- expand.grid(Row_Freq = freq_region_df$freqs,
Col_Freq = freq_region_df$freqs)
long_df$Correlation <- as.vector(cor_matrix)
freq_df = long_df %>% group_by(Row_Freq, Col_Freq) %>%
summarize(corVal = mean(Correlation))
freq_df = freq_df %>%
pivot_wider(names_from = Col_Freq, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Freq)  # Remove Row_Region
rownames(freq_df) = colnames(freq_df)
corrplot(as.matrix(freq_df), method = "color", type = "lower", tl.cex = 0.8)
corrplot(as.matrix(freq_df), method = "color",
type = "lower", tl.cex = 0.8,
cl.lim = c(0, .5))
corrplot(as.matrix(freq_df), method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(0, .5))
freq_df = as.matrix(freq_df)
freq_df[freq_df>.5] = .5
corrplot(as.matrix(freq_df), method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(0, .5))
corrplot(as.matrix(freq_df), method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(0, .5), is.corr = F)
max(freq_df)
long_df <- expand.grid(Row_Freq = freq_region_df$freqs,
Col_Freq = freq_region_df$freqs)
long_df$Correlation <- as.vector(cor_matrix)
freq_df = long_df %>% group_by(Row_Freq, Col_Freq) %>%
summarize(corVal = mean(Correlation))
freq_df = freq_df %>%
pivot_wider(names_from = Col_Freq, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Freq)  # Remove Row_Region
rownames(freq_df) = colnames(freq_df)
freq_df = as.matrix(freq_df)
max(freq_df)
min(freq_df)
corrplot(freq_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(min(freq_df), max(freq_df)), is.corr = F)
splitNames = str_split(rownames(cor_matrix), "_")
freq_region_df <- data.frame(
variable = rownames(cor_matrix),
freqs = sapply(splitNames, function(x) x[2]),
region = sapply(splitNames, function(x) x[3])
)
long_df <- expand.grid(Row_Region = freq_region_df$region,
Col_Region = freq_region_df$region)
long_df$Correlation <- as.vector(cor_matrix)
reg_df = long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(Correlation))
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Region)  # Remove Row_Region
rownames(reg_df) = colnames(reg_df)
reg_df = as.matrix(reg_df)
corrplot(reg_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(min(reg_df), max(reg_df)), is.corr = F)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:/Users/Adam/Documents/GitHub/MasterStatsUsingR/'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
# Load package
library(corrplot)
# Chunk 2: EEG
#Key variable name: pow_delta_O
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
# Chunk 3: cor mat
# Compute correlation matrix
cor_matrix <- cor(select(df, colnames(df)[grepl("pow", colnames(df))]))
corrplot(cor_matrix, method = "color", type = "lower", tl.cex = 0.8)
# Chunk 4: region mat
splitNames = str_split(rownames(cor_matrix), "_")
freq_region_df <- data.frame(
variable = rownames(cor_matrix),
freqs = sapply(splitNames, function(x) x[2]),
region = sapply(splitNames, function(x) x[3])
)
long_df <- expand.grid(Row_Region = freq_region_df$region,
Col_Region = freq_region_df$region)
long_df$Correlation <- as.vector(cor_matrix)
reg_df = long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(Correlation))
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Region)  # Remove Row_Region
rownames(reg_df) = colnames(reg_df)
reg_df = as.matrix(reg_df)
minVal = max(reg_df)
maxVal = max(reg_df)
corrplot(reg_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(minVal, maxVal), is.corr = F)
corrplot(reg_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(minVal, maxVal), is.corr = F)
max(reg_df)
max(reg_df)
minVal = min(reg_df)
maxVal = max(reg_df)
corrplot(reg_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(minVal, maxVal), is.corr = F)
long_df <- expand.grid(Row_Freq = freq_region_df$freqs,
Col_Freq = freq_region_df$freqs)
long_df$Correlation <- as.vector(cor_matrix)
freq_df = long_df %>% group_by(Row_Freq, Col_Freq) %>%
summarize(corVal = mean(Correlation))
freq_df = freq_df %>%
pivot_wider(names_from = Col_Freq, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Freq)  # Remove Row_Region
rownames(freq_df) = colnames(freq_df)
freq_df = as.matrix(freq_df)
corrplot(freq_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(minVal, maxVal), is.corr = F)
# Compute correlation matrix
cor_matrix <- cor(select(df, colnames(df)[grepl("pow", colnames(df))]),
method = 'spearman')
corrplot(cor_matrix, method = "color", type = "lower", tl.cex = 0.8)
splitNames = str_split(rownames(cor_matrix), "_")
freq_region_df <- data.frame(
variable = rownames(cor_matrix),
freqs = sapply(splitNames, function(x) x[2]),
region = sapply(splitNames, function(x) x[3])
)
long_df <- expand.grid(Row_Region = freq_region_df$region,
Col_Region = freq_region_df$region)
long_df$Correlation <- as.vector(cor_matrix)
reg_df = long_df %>% group_by(Row_Region, Col_Region) %>%
summarize(corVal = mean(Correlation))
reg_df = reg_df %>%
pivot_wider(names_from = Col_Region, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Region)  # Remove Row_Region
rownames(reg_df) = colnames(reg_df)
reg_df = as.matrix(reg_df)
minVal = min(reg_df)
maxVal = max(reg_df)
corrplot(reg_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(minVal, maxVal), is.corr = F)
long_df <- expand.grid(Row_Freq = freq_region_df$freqs,
Col_Freq = freq_region_df$freqs)
long_df$Correlation <- as.vector(cor_matrix)
freq_df = long_df %>% group_by(Row_Freq, Col_Freq) %>%
summarize(corVal = mean(Correlation))
freq_df = freq_df %>%
pivot_wider(names_from = Col_Freq, values_from = corVal) %>%
ungroup() %>%  # Ungroup to avoid automatic inclusion
select(-Row_Freq)  # Remove Row_Region
rownames(freq_df) = colnames(freq_df)
freq_df = as.matrix(freq_df)
corrplot(freq_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(minVal, maxVal), is.corr = F)
minVal = min(freq_df)
maxVal = max(freq_df)
corrplot(freq_df, method = "color",
type = "lower", tl.cex = 0.8,
col.lim = c(minVal, maxVal), is.corr = F)
