sampDat$sampMean[sampi] = mean(curSamp)
sampDat$n[sampi] = n
sampi = sampi + 1
}
}
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5) + myTheme
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5) + myTheme + xlim(c(0,100))
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100))
dat = df$pow_delta_O
sampSize = seq(1,25,1)
reps = 10000
sampDat = data.frame(sampMean = rep(0, reps*length(sampSize)),
n        = rep(0, reps*length(sampSize)))
sampi = 1
for(ii in 1:reps){
for(n in sampSize){
curSamp = sample(dat, n)
sampDat$sampMean[sampi] = mean(curSamp)
sampDat$n[sampi] = n
sampi = sampi + 1
}
}
dat = df$pow_delta_O
sampSize = seq(1,25,1)
reps = 10000
n_sizes <- length(sampSize)
# Pre-allocate result data frame
sampDat <- data.frame(
sampMean = numeric(reps * n_sizes),
n = rep(sampSize, each = reps)
)
# Use vapply and replicate to speed up the sampling process
sampDat$sampMean <- unlist(lapply(sampSize, function(n) {
replicate(reps, mean(sample(dat, n)))
}))
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100)) +
geom_vline(xintercept = mean(sampDat$sampMean), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta")
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta")
dat = df$pow_delta_O
sampSize = seq(1,50,1)
reps = 10000
n_sizes <- length(sampSize)
# Pre-allocate result data frame
sampDat <- data.frame(
sampMean = numeric(reps * n_sizes),
n = rep(sampSize, each = reps)
)
# Use vapply and replicate to speed up the sampling process
sampDat$sampMean <- unlist(lapply(sampSize, function(n) {
replicate(reps, mean(sample(dat, n)))
}))
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta")
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "green", high = "magenta")
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 25)
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 20)
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,100)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 15)
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 100) + myTheme + xlim(c(0,50)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 15)
sampDat %>% ggplot(aes(x=sampMean, group = as.factor(n), color = n)) +
geom_freqpoly(linewidth = 1.5, bins = 50) + myTheme + xlim(c(0,50)) +
geom_vline(xintercept = mean(dat), color = 'red') +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 15)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: data
#basketball player heights
M_NBA = 76
#Basketball FAN heights
M_fan = 70
#overall distribution of heights statistics:
M = 70
S = 4
# Chunk 3: NBA type II
sampSize = seq(1,15,1)
runs = 1000
simRes = data.frame('sampMean' = rep(0,runs*length(sampSize)),
'sig' = rep(0,runs*length(sampSize)),
'n' = rep(0, runs*length(sampSize)))
simi = 1
for(ii in 1:runs){
for(n in sampSize){
samp = rnorm(n, M_NBA, S)
critVal = qnorm(.975, M, S/sqrt(n))
simRes$sampMean[simi] = mean(samp)
simRes$sig[simi] = mean(samp) > critVal
simRes$n[simi] = n
simi = simi + 1
}
}
simSummary = simRes %>% group_by(n) %>% summarize(sim_typeII = 1-mean(sig))
simSummary %>%
ggplot(aes(y = sim_typeII, x = n, color = as.factor(1))) +
geom_line(linewidth=2) +
myTheme + brightCol + theme(legend.position = 'none')
# Chunk 4: NBA type II analytical
#probability of retaining the null if sample size = 1
critVal = qnorm(.975, M, S)
#what's the probability of an NBA player shorter than the critical value?
typeII = pnorm(critVal, M_NBA, S)
#can you write this for all sample sizes in one line?
# pnorm(critVal, M_NBA, standardError)
simSummary$analytic_typeII = pnorm(qnorm(.975, M, S/sqrt(sampSize)),
M_NBA, S/sqrt(sampSize))
simLong = simSummary %>% pivot_longer(cols = c(sim_typeII, analytic_typeII),
names_to = 'calculation_source',
values_to = 'type_II_error')
simLong %>% ggplot(aes(x = n, y = type_II_error,
color = calculation_source)) +
geom_line() + myTheme + brightCol
replicate(runs, rnorm(n, M_NBA, S))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
lapply(sampSize, function(n) {
replicate(runs,
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
) }
)
lapply(sampSize, function(n) {
1 - mean(replicate(runs,
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
)) }
)
apply(sampSize, function(n) {
1 - mean(replicate(runs,
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
)) }
)
vapply(sampSize, function(n) {
1 - mean(replicate(runs,
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
)) }
)
unlist(lapply(sampSize, function(n) {
1 - mean(replicate(runs,
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
)) }
))
simSummary = data.frame(
sim_type_II = unlist(lapply(sampSize, function(n) {
1 - mean(replicate(runs,
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
)) }
))
)
simSummary %>%
ggplot(aes(y = sim_typeII, x = n, color = as.factor(1))) +
geom_line(linewidth=2) +
myTheme + brightCol + theme(legend.position = 'none')
simSummary %>%
ggplot(aes(y = sim_type_II, x = n, color = as.factor(1))) +
geom_line(linewidth=2) +
myTheme + brightCol + theme(legend.position = 'none')
simSummary = data.frame(
sim_type_II = unlist(lapply(sampSize, function(n) {
1 - mean(replicate(runs,
mean(rnorm(n, M_NBA, S)) > qnorm(.975, M, S/sqrt(n))
)) }
)),
n = sampSize
)
simSummary %>%
ggplot(aes(y = sim_type_II, x = n, color = as.factor(1))) +
geom_line(linewidth=2) +
myTheme + brightCol + theme(legend.position = 'none')
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: data
#basketball player heights
df = data.frame('heights' = c(72,74,76,80,78,73,73,71,78,81,75,75,79,77,79))
n = length(df$heights)
#step 1: Are NBA players drawn from the same height distribution
#        as the overall population?
#step 2:
#       NULL:
M = 70
S = 4
#       ALTERNATE:
# not the null
#step 3:
#       ALPHA:
alpha = .05
#       critical z value:
critVal = abs(qnorm(alpha/2))
#step 4:
m = mean(df$heights)
n = length(df$heights)
sampleZ = (m - M) / (S/sqrt(length(n)))
#step 5:
if (sampleZ>critVal | sampleZ<-critVal){
print('mean value is more extreme than critical threshold!')
} else {
print('mean value is not more extreme than critical threshold!')
}
n = length(df$heights)
#step 1: Are NBA players drawn from the same height distribution
#        as the overall population?
#step 2:
#       NULL:
M = 70
S = 4
#       ALTERNATE:
# not the null
#step 3:
#       ALPHA:
alpha = .05
#       critical z value:
critVal = abs(qnorm(alpha/2))
#step 4:
m = mean(df$heights)
n = length(df$heights)
sampleZ = (m - M) / (S/sqrt(length(n)))
#step 5:
if (sampleZ>critVal | sampleZ< -critVal){
print('mean value is more extreme than critical threshold!')
} else {
print('mean value is not more extreme than critical threshold!')
}
#step 6:
#What does the result in step 5 mean for answering our original question?
z.test(df$heights, mu = M, sigma.x = S)
(m - M) / (S/sqrt(length(n)))
(S/sqrt(length(n)))
S/sqrt(length(n))
sampleZ = (m - M) / (S/sqrt(n))
#step 5:
if (sampleZ>critVal | sampleZ< -critVal){
print('mean value is more extreme than critical threshold!')
} else {
print('mean value is not more extreme than critical threshold!')
}
z.test(df$heights, mu = M, sigma.x = S)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
#load in the restingEEG dataset. There are a lot of variables in this dataset
#for this analysis let's just focus on the delta power in the occipital region
#of the head.
#Key variable name: pow_delta_O
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
ggplot(df, aes(x = pow_delta_O, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
EEGsum <- df %>% summarize(setName = 'deltaPow',
meanVal = mean(pow_delta_O),
medianVal = median(pow_delta_O),
sdVal = sd(pow_delta_O),
logMean = mean(log(pow_delta_O)),
logSD = sd(log(pow_delta_O)),
offSet = 0)
x <- df$pow_delta_O
analyticDists <- data.frame(
'norm' = dnorm(x,
mean = EEGsum$meanVal,
sd = EEGsum$sdVal),
'poisson' = dpois(round(x),
lambda = EEGsum$meanVal),
'logNorm' = dlnorm(x,
meanlog = EEGsum$logMean,
sdlog = EEGsum$logSD),
'xVal' = x)
analyticDists <- analyticDists %>% pivot_longer(cols = names(analyticDists)[-4],
values_to = 'density',
names_to = 'dist')
df$dist = "empirical data"
df %>% ggplot(aes(x = pow_delta_O, color = dist)) +
geom_freqpoly(aes(y = ..density..), linewidth = 2, bins = 50) +
geom_line(data = analyticDists, aes(x = xVal, y = density), linewidth = 2) +
brightCol +  myTheme +
ggtitle("EEG data")
df %>% ggplot(aes(x = pow_delta_O, color = dist)) +
geom_freqpoly(aes(y = after_stat(density)), linewidth = 2, bins = 50) +
geom_line(data = analyticDists, aes(x = xVal, y = density), linewidth = 2) +
brightCol +  myTheme +
ggtitle("EEG data")
plotAgainstDists <- function(df, varOfInterest, sumVals, myTitle, binCount = 50){
x <- df[[varOfInterest]]
analyticDists <- data.frame(
'norm' = dnorm(x,
mean = sumVals$meanVal,
sd = sumVals$sdVal),
'poisson' = dpois(round(x),
lambda = sumVals$meanVal),
'logNorm' = dlnorm(x + sumVals$offSet,
meanlog = sumVals$logMean,
sdlog = sumVals$logSD),
'xVal' = x)
analyticDists <- analyticDists %>% pivot_longer(cols = names(analyticDists)[-4],
values_to = 'density',
names_to = 'dist')
df$dist = "empirical data"
df %>% ggplot(aes_string(x = varOfInterest, color = 'dist')) +
geom_freqpoly(aes(y = after_stat(density)), linewidth = 2, bins = binCount) +
geom_line(data = analyticDists, aes(x = xVal, y = density), linewidth = 2) +
brightCol +  myTheme +
ggtitle(myTitle)
}
df = read.csv(paste0(gitHubPath, '\\data\\emailTimes.csv'))
df <- df %>% group_by(DayOfWeek, Month, DayOfMonth, Year) %>%
summarize(count = n(), .groups = 'drop')
# df = df %>% filter(DayOfWeek %in% c('Mon', 'Tue', 'Wed', 'Thu', 'Fri'))
# df = df %>% filter(DayOfWeek %in% c('Sat', 'Sun'))
df$dummy = as.factor(1)
ggplot(df, aes(x = count, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(0, 51, 3)) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
emailSum <- df %>% summarize(setName = 'emailsPerDay',
meanVal = mean(count),
sdVal = sd(count),
logMean = mean(log(count)),
logSD = sd(log(count)),
offSet = 0)
plotAgainstDists(df, "count",  emailSum, 'email')
df = read.csv(paste0(gitHubPath, '\\data\\SP500HistoricalData.csv'))
names(df)[6] <- 'Change'
df$Change = unlist(lapply(df$Change, function(x) as.numeric(strsplit(x, '%')[[1]])))
df$dummy = as.factor(1)
ggplot(df, aes(x = Change, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(-2, 2, .1)) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
xlab('Daily Change (%)')
sp500Sum <- df %>% summarize(setName = 'sp500',
meanVal = mean(Change),
sdVal = sd(Change),
logMean = mean(log(Change-min(Change)+.01)),
logSD = sd(log(Change-min(Change)+.01)),
offSet = -min(Change)+.01)
plotAgainstDists(df, "Change", sp500Sum, 'sp500')
df = read.csv(paste0(gitHubPath, 'data\\MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, 'data\\MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, 'data\\MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
normDat = dnorm(seq(-3,3,.01))
normDat = rnorm(100000)
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 10)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 2)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 2)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 10)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 2)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 10)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
normDat = dnorm(seq(-4,4,.01))
tDat = dt(seq(-4,4,.01), 100)
df = data.frame('norm' = normDat,
't' = tDat,
'x' = seq(-4,4,.01))
df <- df %>% pivot_longer(cols = c('norm', 't'),
names_to = 'dist',
values_to = 'density')
df%>% ggplot(aes(x = x, y = density, color = dist)) +
geom_line(linewidth = 2) + myTheme + brightCol
df = read.csv(paste0(gitHubPath, 'data\\MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = TargALL_UVSD_d, color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
min(df$TargALL_UVSD_d)
max(df$TargALL_UVSD_d)
