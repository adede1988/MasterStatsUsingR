ggplot(subDF, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2, linetype = 'dashed')
ggplot(subDF, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2, linetype = 'dashed') +
geom_hline(yintercept = powMean, linetype = 'dashed', color = 'green', size = 2)
cor.test(df$age, log(df$pow_delta_O, 10))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
#dummy for plotting
df$dummy = as.factor(1)
#outlier threshold
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
#filter data to look only at children up to 18 years old
df <- df %>% filter(age<(18*12))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
#use R's builtin function to fit the regression:
pow.age = lm(log(pow_delta_O, 10) ~ age, data = df)
coefficients(pow.age)
summary(pow.age)
coefficients(pow.age)
slope = coefficients(pow.age)[[1]]
yPrime = slope * df$age + intercept
#pull out the coefficients and make predictions
intercept = coefficients(pow.age)[[1]]
slope = coefficients(pow.age)[[2]]
yPrime = slope * df$age + intercept
#calculate the SStotal and SSerror values
yMean = mean(log(df$pow_delta_O,10))
SStotal = sum((log(df$pow_delta_O,10) - yMean)^2)
SSerror = sum((log(df$pow_delta_O,10) - yPrime)^2)
#get R2 through proportion method
R2 = SSreg / SStotal
SSreg = SStotal - SSerror
#get R2 through proportion method
R2 = SSreg / SStotal
#get R2 by squaring the correlation
R2 = cor(df$age, log(df$pow_delta_O,10))
#get R2 through proportion method
R2 = SSreg / SStotal
#get R2 by squaring the correlation
R2 = cor(df$age, log(df$pow_delta_O,10))
summary(pow.age)
#get R2 by squaring the correlation
R2 = cor(df$age, log(df$pow_delta_O,10))^2
#get R2 through proportion method
R2 = SSreg / SStotal
#get R2 through proportion method
R2_prop = SSreg / SStotal
#get R2 by squaring the correlation
R2_cor = cor(df$age, log(df$pow_delta_O,10))^2
predict(pow.age, df$age)
#predictions can also be made with R functions
yPrime2 = predict(pow.age, data.frame(age = df$age))
yPrime3 = log(df$pow_delta_O,10) - pow.age$residuals
ggplot(pow.age, aes(x = residuals)) + geom_histogram()
ggplot(data.frame(res = pow.age$residuals), aes(x = res)) + geom_histogram()
#could also calculate SSerror using residuals directly:
SSerror2 = sum(pow.age$residuals^2)
#look again at what we had in the lm output:
summary(pow.age)
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
pow.age_adults = lm(log(pow_delta_O, 10) ~ age, data = df)
summary(pow.age_adults)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
#dummy for plotting
df$dummy = as.factor(1)
#outlier threshold
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
#filter data to look only at children up to 18 years old
df <- df %>% filter(age<(18*12))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: EEG
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
#dummy for plotting
df$dummy = as.factor(1)
#outlier threshold
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
#filter data to look only at children up to 18 years old
df <- df %>% filter(age<(18*12))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
#step 3: Use degrees of freedom to establish critical F-ratio
dfreg = 1 #number of predictors
dferr = length(df$age) - dfreg - 1
qf(.95, dfreg, dferr)
#SS values
SSerror = sum(pow.age$residuals^2)
yMean = mean(log(df$pow_delta_O,10))
SStotal = sum((log(df$pow_delta_O,10) - yMean)^2)
SSreg = SStotal - SSerror
#get F ratio:
Fratio = (SSreg / dfreg) / (SSerr / dferr)
#SS values
SSerr = sum(pow.age$residuals^2)
yMean = mean(log(df$pow_delta_O,10))
SStotal = sum((log(df$pow_delta_O,10) - yMean)^2)
SSreg = SStotal - SSerr
#get F ratio:
Fratio = (SSreg / dfreg) / (SSerr / dferr)
summary(pow.age)
#step 5: compare F ratio observed to critical value
if(Fratio > Fcrit){
print(paste0("The observed F ratio of ", round(Fratio,2),
" is greater than F critical of ", round(Fcrit,2),
". Age significantly predicts delta power"))
} else{
print(paste0("The observed F ratio of ", round(Fratio,2),
" is NOT greater than F critical of ", round(Fcrit,2),
". No evidence that age predicts delta power"))
}
#Step 1: is delta power predicted by age?
#step 2: Null: There is no linear relationship between age and delta power
#        Alternative: age predicts delta power
#step 3: Use degrees of freedom to establish critical F-ratio
dfreg = 1 #number of predictors
dferr = length(df$age) - dfreg - 1
Fcrit = qf(.95, df1 = dfreg, df2 = dferr) #qf takes two df arguments: df1 is numerator
#step 4: calcualte F ratio for the regression
#SS values
SSerr = sum(pow.age$residuals^2)
yMean = mean(log(df$pow_delta_O,10))
SStotal = sum((log(df$pow_delta_O,10) - yMean)^2)
SSreg = SStotal - SSerr
#get F ratio:
Fratio = (SSreg / dfreg) / (SSerr / dferr)
#step 5: compare F ratio observed to critical value
#AND step 6: provide interpretation to answer the question
if(Fratio > Fcrit){
print(paste0("The observed F ratio of ", round(Fratio,2),
" is greater than F critical of ", round(Fcrit,2),
". Age significantly predicts delta power"))
} else{
print(paste0("The observed F ratio of ", round(Fratio,2),
" is NOT greater than F critical of ", round(Fcrit,2),
". No evidence that age predicts delta power"))
}
print(paste0("The observed F ratio of ", round(Fratio,2),
" is greater than F critical of ", round(Fcrit,2),
". /n Age significantly predicts delta power"))
print(paste0("The observed F ratio of ", round(Fratio,2),
" is greater than F critical of ", round(Fcrit,2),
". \n Age significantly predicts delta power"))
print(cat("The observed F ratio of ", round(Fratio,2),
" is greater than F critical of ", round(Fcrit,2),
".\n Age significantly predicts delta power"))
print(cat("The observed F ratio of", round(Fratio,2),
" is greater than F critical of", round(Fcrit,2),
".\n Age significantly predicts delta power"))
print(cat("The observed F ratio of", round(Fratio,2),
"is greater than F critical of", round(Fcrit,2),
".\n Age significantly predicts delta power"))
#compare to builtin output:
summary(pow.age)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
#dummy for plotting
df$dummy = as.factor(1)
#outlier threshold
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
#filter data to look only at children up to 18 years old
df <- df %>% filter(age<(18*12))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
#use R's builtin function to fit the regression:
pow.age = lm(log(pow_delta_O, 10) ~ age, data = df)
summary(pow.age)
#use R's builtin function to fit the regression:
pow.age = lm(log(pow_delta_O, 10) ~ age, data = df)
summary(pow.age)
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_smooth(method = 'lm')
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_smooth(method = 'lm', color = 'red')
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_smooth(method = 'lm', color = 'red', se = F)
#What distribution shape describes the residuals?
ggplot(data.frame('residuals' = pow.age$residuals,
'dummy' = as.factor(1)),
aes(x = residuals, fill = dummy)) +
geom_histogram() + brightFil + myTheme +
theme(legend.position = 'none')
#do the residuals vary systematically as a function of age?
ggplot(data.frame('residuals' = pow.age$residuals,
'age' = df$age,
'dummy' = as.factor(1)),
aes(x = age, y = residuals, color = dummy))+
geom_point(size = 2) + brightCol + myTheme +
them(legend.position = 'none')
#do the residuals vary systematically as a function of age?
ggplot(data.frame('residuals' = pow.age$residuals,
'age' = df$age,
'dummy' = as.factor(1)),
aes(x = age, y = residuals, color = dummy))+
geom_point(size = 2) + brightCol + myTheme +
theme(legend.position = 'none')
#do the residuals vary systematically as a function of age?
ggplot(data.frame('residuals' = pow.age$residuals,
'age' = df$age,
'dummy' = as.factor(1)),
aes(x = age, y = residuals, color = dummy))+
geom_point(size = 2) + brightCol + myTheme +
theme(legend.position = 'none') +
geom_hline(yintercept = 0, color = 'red')
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
#dummy for plotting
df$dummy = as.factor(1)
#outlier threshold
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
#filter data to look only at children up to 18 years old
df <- df %>% filter(age<(18*12))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_smooth(method = 'lm', color = 'red', se = F)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: load plastic waste data
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
# Chunk 3: EEG
#load in the restingEEG dataset. There are a lot of variables in this dataset
#for this analysis let's just focus on the delta power in the occipital region
#of the head.
#Key variable name: pow_delta_O
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
ggplot(df, aes(x = pow_delta_O, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
ggplot(df, aes(x = log(pow_delta_O,10), color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
df <- df %>% filter(age<(8*12))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
# Chunk 4: t test split
df$babyChild = df$age<50
df$babyChild[df$babyChild] = 'baby'
df$babyChild[df$babyChild=='FALSE'] = 'child'
ggplot(df, aes(x = log(pow_delta_O,10), color = babyChild)) +
geom_freqpoly(linewidth = 2) + myTheme + brightCol
t.test(log(df$pow_delta_O[df$babyChild=='baby'],10),
log(df$pow_delta_O[df$babyChild=='child'],10))
# Chunk 5: age
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
df <- df %>% filter(age<(18*12))
age = df$age
pow = log(df$pow_delta_O,10)
ageMean = mean(age)
powMean = mean(pow)
ageSD = sd(age)
powSD = sd(pow)
r = cor(age, pow)
b = r*(powSD / ageSD)
a = powMean - b*ageMean
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2)
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2)
set.seed(13)
subDF = df[sample(length(df$age), 10),]
ggplot(subDF, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 3) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2, linetype = 'dashed') +
geom_hline(yintercept = powMean, linetype = 'dashed', color = 'green', size = 2)
# +
#   geom_vline(xintercept = ageMean, linetype = 'dashed', color = 'green', size = 2) +
#   geom_hline(yintercept = powMean, linetype = 'dashed', color = 'green', size = 2)
cor.test(df$age, log(df$pow_delta_O, 10))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2)
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2)
pow.age = lm(log(pow_delta_O,10) ~ age - 1, data = df)
a = pow.age$coefficients[[1]]
b = pow.age$coefficients[[2]]
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2)
pow.age = lm(log(pow_delta_O,10) ~ age +0, data = df)
a = pow.age$coefficients[[1]]
b = pow.age$coefficients[[2]]
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2)
pow.age = lm(log(pow_delta_O,10) ~ age +0, data = df)
b = pow.age$coefficients[[1]]
a = 0
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none') +
geom_abline(slope = b, intercept = a, color = 'red', size = 2)
summary(pow.age)
ggplot(data.frame('residuals' = pow.age$residuals,
'age' = df$age,
'dummy' = as.factor(1)),
aes(x = age, y = residuals, color = dummy))+
geom_point(size = 2) + brightCol + myTheme +
theme(legend.position = 'none') +
geom_hline(yintercept = 0, color = 'red')
ggplot(data.frame('residuals' = pow.age$residuals,
'dummy' = as.factor(1)),
aes(x = residuals, fill = dummy)) +
geom_histogram() + brightFil + myTheme +
theme(legend.position = 'none')
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
df = df[df$group == 'CON' | df$group == "AD",]
t.test(log(df$pow_delta_O[df$group == 'AD'],10),
log(df$pow_delta_O[df$group == 'CON'],10))
df <- df %>% filter(age<(18*12))
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = dummy)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
t.test(log(df$pow_delta_O[df$group == 'AD'],10),
log(df$pow_delta_O[df$group == 'CON'],10))
t.test(log(df$pow_delta_O[df$group == 'AD'],10),
log(df$pow_delta_O[df$group == 'CON'],10))
age.lm = lm(log(pow_delta_O,10) ~ age+group , data = df)
aovTab = Anova(age.lm, type = 3)
ei = which(row.names(aovTab) == 'Residuals')
ri = which(row.names(aovTab) == 'group')
print(paste0('eta squared: ', aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])))
aovTab = anova(age.lm, type = 3)
library(car)
aovTab = Anova(age.lm, type = 3)
ei = which(row.names(aovTab) == 'Residuals')
ri = which(row.names(aovTab) == 'group')
print(paste0('eta squared: ', aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])))
aovTab
age.lm = lm(log(pow_delta_O,10) ~ age , data = df)
df$delta_O_residuals = age.lm$residuals
t.test(df$delta_O_residuals[df$group == 'AD'],
df$delta_O_residuals[df$group == 'CON'])
meanAD = mean(df$delta_O_residuals[df$group == 'AD'])
meanCON = mean(df$delta_O_residuals[df$group == 'CON'])
SS_AD = sum((df$delta_O_residuals[df$group == 'AD'] - meanAD)^2)
SS_CON = sum((df$delta_O_residuals[df$group == 'CON'] - meanCON)^2)
n_AD = length(df$delta_O_residuals[df$group == 'AD'])
n_CON = length(df$delta_O_residuals[df$group == 'CON'])
Spooled = sqrt( ( (SS_AD + SS_CON) / (n_AD+n_CON-2) ))
(meanAD - meanCON) / Spooled
ggplot(df, aes(x = delta_O_residuals, color = group)) +
geom_freqpoly(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
ggplot(df, aes(x = group, y = delta_O_residuals, color = group)) +
geom_boxplot() +
myTheme + brightFil + brightCol
aovTab
ggplot(df, aes(x = group, y = log(pow_delta_O,10), color = group)) +
geom_boxplot() +
myTheme + brightFil + brightCol
(meanAD - meanCON) / Spooled #cohen's d
meanAD = mean(log(df$pow_delta_O[df$group == 'AD'],10))
meanCON = mean(log(df$pow_delta_O[df$group == 'CON'],10))
SS_AD = sum((log(df$pow_delta_O[df$group == 'AD'],10) - meanAD)^2)
SS_CON = sum((log(df$pow_delta_O[df$group == 'AD'],10) - meanCON)^2)
Spooled = sqrt( ( (SS_AD + SS_CON) / (n_AD+n_CON-2) ))
(meanAD - meanCON) / Spooled #cohen's d
ggplot(df, aes(x = delta_O_residuals, color = group)) +
geom_freqpoly(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
#determine the effect size without regressing out age first
ggplot(df, aes(x = log(pow_delta_O,10), color = group)) +
geom_freqpoly(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
#determine the effect size without regressing out age first
ggplot(df, aes(x = log(pow_delta_O,10), color = group)) +
geom_freqpoly(size = 2) +
myTheme + brightFil + brightCol
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = group)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
ggplot(df, aes(x = age, y = delta_O_residuals, color = group)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
#determine the effect size without regressing out age first
ggplot(df, aes(x = log(pow_delta_O,10), color = group)) +
geom_freqpoly(size = 2) +
myTheme + brightFil + brightCol
ggplot(df, aes(x = group, y = log(pow_delta_O,10), color = group)) +
geom_boxplot() +
myTheme + brightFil + brightCol
meanAD = mean(log(df$pow_delta_O[df$group == 'AD'],10))
meanCON = mean(log(df$pow_delta_O[df$group == 'CON'],10))
SS_AD = sum((log(df$pow_delta_O[df$group == 'AD'],10) - meanAD)^2)
SS_CON = sum((log(df$pow_delta_O[df$group == 'AD'],10) - meanCON)^2)
Spooled = sqrt( ( (SS_AD + SS_CON) / (n_AD+n_CON-2) ))
(meanAD - meanCON) / Spooled #cohen's d
ggplot(df, aes(x = age, y = delta_O_residuals, color = group)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
meanAD = mean(df$delta_O_residuals[df$group == 'AD'])
meanCON = mean(df$delta_O_residuals[df$group == 'CON'])
SS_AD = sum((df$delta_O_residuals[df$group == 'AD'] - meanAD)^2)
SS_CON = sum((df$delta_O_residuals[df$group == 'CON'] - meanCON)^2)
n_AD = length(df$delta_O_residuals[df$group == 'AD'])
n_CON = length(df$delta_O_residuals[df$group == 'CON'])
Spooled = sqrt( ( (SS_AD + SS_CON) / (n_AD+n_CON-2) ))
(meanAD - meanCON) / Spooled #cohen's d
print(paste0('eta squared: ', aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])))
t.test(log(df$pow_delta_O[df$group == 'AD'],10),
log(df$pow_delta_O[df$group == 'CON'],10))
ri = which(row.names(aovTab) == 'age')
print(paste0('eta squared: ', aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])))
aovTab
sum((log(df$pow_delta_O,10) - mean(log(df$pow_delta_O,10)))^2)
anova(lm(log(pow_delta_O, 10) ~ age + group, data = df))
aovTab = anova(age.lm)
ei = which(row.names(aovTab) == 'Residuals')
ri = which(row.names(aovTab) == 'group')
print(paste0('eta squared: ', aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])))
aovTab
age.lm = lm(log(pow_delta_O,10) ~ age+group , data = df)
aovTab = anova(age.lm)
aovTab
ei = which(row.names(aovTab) == 'Residuals')
ri = which(row.names(aovTab) == 'group')
print(paste0('eta squared: ', aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])))
age.lm = lm(log(pow_delta_O,10) ~ age+group+sex , data = df)
aovTab = anova(age.lm)
aovTab
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = group)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = group, shape = sex)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = group, shape = sex)) +
geom_point(size = 2) +
guides(shape = guide_legend(override.aes = list(color = c("red", 'red')))) +
myTheme + brightFil + brightCol
ggplot(df, aes(x = age, y = log(pow_delta_O,10), color = sex)) +
geom_point(size = 2) +
myTheme + brightFil + brightCol
