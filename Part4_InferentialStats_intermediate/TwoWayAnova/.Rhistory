min(df$SalesInThousands)
df$SalesInThousands[df$SalesInThousands<0] <- rnorm(sum(df$SalesInThousands<0),
10, 3)
min(df$SalesInThousands)
df$Promotion = as.factor(df$Promotion)
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(~MarketSize)
df %>% ggplot(aes(y = SalesInThousands, color = MarketSize)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df %>% ggplot(aes(x = AgeOfStore, y = SalesInThousands, color = MarketSize)) +
geom_jitter() +
myTheme + brightCol + brightFil
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(kableExtra)
# Chunk 2: data
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
df$Promotion = as.factor(df$Promotion)
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
# Chunk 3: t tests
alphaAdjusted = .05/3
results = data.frame('test' = c('0','0','0'),
'pval' = c(0,0,0),
'n1' = c(0,0,0),
'n2' = c(0,0,0),
'mean1' = c(0,0,0),
'mean2' = c(0,0,0),
'sigDif'= c(0,0,0))
out = t.test(df$SalesInThousands[df$Promotion == 1],
df$SalesInThousands[df$Promotion == 2])
results$test[1] = paste0('promo', 1, '_v_promo', 2)
results$pval[1] = out$p.value
results$n1[1] = sum(df$Promotion == 1)
results$n2[1] = sum(df$Promotion == 2)
results$mean1[1] = round(out$estimate[1])
results$mean2[1] = round(out$estimate[2])
results$sigDif[1] = out$p.value < alphaAdjusted
out = t.test(df$SalesInThousands[df$Promotion == 1],
df$SalesInThousands[df$Promotion == 3])
results$test[2] = paste0('promo', 1, '_v_promo', 3)
results$pval[2] = out$p.value
results$n1[2] = sum(df$Promotion == 1)
results$n2[2] = sum(df$Promotion == 3)
results$mean1[2] = round(out$estimate[1])
results$mean2[2] = round(out$estimate[2])
results$sigDif[2] = out$p.value < alphaAdjusted
out = t.test(df$SalesInThousands[df$Promotion == 2],
df$SalesInThousands[df$Promotion == 3])
results$test[3] = paste0('promo', 2, '_v_promo', 3)
results$pval[3] = out$p.value
results$n1[3] = sum(df$Promotion == 2)
results$n2[3] = sum(df$Promotion == 3)
results$mean1[3] = round(out$estimate[1])
results$mean2[3] = round(out$estimate[2])
results$sigDif[3] = out$p.value < alphaAdjusted
results %>%
kbl(align = 'c', digits = 4) %>%
kable_classic(full_width = F,
font_size = 20)
# Chunk 4: sample size
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
#After averaging over weeks, variability is lower:
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(lme4)
library(kableExtra)
# Chunk 2: data
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
temp = df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"]
df$SalesInThousands[df$Promotion == 3 & df$MarketSize == "Large"] = temp -
rnorm(length(temp), 1.5, 30)
min(df$SalesInThousands)
df$SalesInThousands[df$SalesInThousands<0] <- rnorm(sum(df$SalesInThousands<0),
10, 3)
min(df$SalesInThousands)
df$Promotion = as.factor(df$Promotion)
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank()) +
facet_grid(~MarketSize)
df %>% ggplot(aes(y = SalesInThousands, color = MarketSize)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df %>% ggplot(aes(x = AgeOfStore, y = SalesInThousands, color = MarketSize)) +
geom_jitter() +
myTheme + brightCol + brightFil
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
#After averaging over weeks, variability is lower:
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
#After averaging over weeks, variability is lower:
df %>% ggplot(aes(y = SalesInThousands, x = as.numeric(Promotion), color = Promotion))  +
geom_jitter()+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
#After averaging over weeks, variability is lower:
df %>% ggplot(aes(y = SalesInThousands, x = as.numeric(Promotion), color = Promotion))  +
geom_jitter()+
myTheme + brightCol + brightFil+
theme(axis.label.x = element_blank())
#After averaging over weeks, variability is lower:
df %>% ggplot(aes(y = SalesInThousands, x = as.numeric(Promotion), color = Promotion))  +
geom_jitter()+
myTheme + brightCol + brightFil+
theme(axis.lab.x = element_blank())
group_means <- df %>%
group_by(Promotion) %>%
summarise(
mean_y = mean(SalesInThousands, na.rm = TRUE),
xmin = as.numeric(Promotion[1])-.5,
xmax = as.numeric(Promotion[1])+.5
)
View(group_means)
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
myTheme + brightCol +
theme(axis.text.x = element_blank())
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands), color = 'blue', size = 2)+
myTheme + brightCol +
theme(axis.text.x = element_blank())
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
theme(axis.text.x = element_blank())
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('') +
theme(axis.text.x = element_blank())
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('')
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('Promotion') +
theme(legend.position = 'none')
min(df$SalesInThousands)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(lme4)
library(kableExtra)
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
group_means <- df %>%
group_by(Promotion) %>%
summarise(
mean_y = mean(SalesInThousands, na.rm = TRUE),
xmin = as.numeric(Promotion[1])-.5,
xmax = as.numeric(Promotion[1])+.5
)
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('Promotion') +
theme(legend.position = 'none')
df$Promotion <- as.factor(df$Promotion)
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
group_means <- df %>%
group_by(Promotion) %>%
summarise(
mean_y = mean(SalesInThousands, na.rm = TRUE),
xmin = as.numeric(Promotion[1])-.5,
xmax = as.numeric(Promotion[1])+.5
)
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('Promotion') +
theme(legend.position = 'none')
length(unique(df$LocationID))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
library(lme4)
library(kableExtra)
# Chunk 2: data
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
df$Promotion <- as.factor(df$Promotion)
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
group_means <- df %>%
group_by(Promotion) %>%
summarise(
mean_y = mean(SalesInThousands, na.rm = TRUE),
xmin = as.numeric(Promotion[1])-.5,
xmax = as.numeric(Promotion[1])+.5
)
# Now plot
ggplot(df, aes(x = as.numeric(Promotion), y = SalesInThousands, color = Promotion)) +
geom_jitter() +
geom_segment(data = group_means,
aes(x = xmin, xend = xmax, y = mean_y, yend = mean_y),
color = "red", linetype = "dashed", inherit.aes = FALSE) +
geom_hline(yintercept = mean(df$SalesInThousands),
color = 'blue', linewidth = 2)+
myTheme + brightCol +
xlab('Promotion') +
theme(legend.position = 'none')
df <- read.csv(paste0(gitHubPath, 'data\\WA_Marketing-Campaign.csv'))
df$Promotion <- as.factor(df$Promotion)
length(unique(df$LocationID))
names(df)
df %>% ggplot(aes(x = week, y = SalesInThousands,
group = LocationID, color = LocationID)) +
geom_line(alpha = .5) +
myTheme +
scale_color_gradient2(low = "green", mid = "white", high = "magenta",
midpoint = 500)
#is there much variability week to week?
df %>% group_by(week) %>% summarize(weeklyMean = mean(SalesInThousands),
se = sd(SalesInThousands)/sqrt(n()))%>%
ggplot(aes(x = week, y = weeklyMean, group = 1)) +
geom_line(linewidth = 3, color = 'green') +            # Linegraph
geom_point(size = 3, color = 'green') +                # Points for means
geom_errorbar(aes(ymin = weeklyMean - se,   # Lower bound of error
ymax = weeklyMean + se),  # Upper bound of error
width = 0.2, color = 'green') +          # Width of error bars
myTheme
#view the plot of sales by promotion before averaging across weeks:
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
df<- df %>% group_by(LocationID) %>%
summarize(SalesInThousands = mean(SalesInThousands),
across(everything(), ~ first(.), .names = "{.col}"))
#After averaging over weeks, variability is lower:
df %>% ggplot(aes(y = SalesInThousands, color = Promotion)) +
geom_boxplot(linewidth = 2)+
myTheme + brightCol + brightFil+
theme(axis.text.x = element_blank())
#sum over all x for MSwithin
# MSwithin = sum((x - mean(X))^2) / (n-p) = SSwithin/dfwithin
#mean(x) means within group
#loop over Promotions summing their contributions to MSwithin
SSwithin = 0
for(p in unique(df$Promotion)){
tmp = df %>% filter(Promotion == p)
SSwithin = SSwithin + sum((df$SalesInThousands - mean(df$SalesInThousands))^2)
}
MSwithin = SSwithin / 3
# MSwithin = sum((x - mean(X))^2) / (n-p) = SSwithin/dfwithin
#mean(x) means within group
#loop over Promotions summing their contributions to SSwithin
SSwithin = 0
for(p in unique(df$Promotion)){
tmp = df %>% filter(Promotion == p)
SSwithin = SSwithin + sum((tmp$SalesInThousands - mean(tmp$SalesInThousands))^2)
}
MSwithin = SSwithin / 3
#step 3: Use degrees of freedom to establish critical F-ratio
dfbetween = 3 #number of groups
dfwithin = length(df$Promotion) - 3
#qf takes two df arguments: df1 is numerator
Fcrit = qf(.95, df1 = dfbetween, df2 = dfwithin)
# MSbetween = sum(ni(mean(Xi) - GM)^2) / (p-1)
#ni = number of observations in group i
#GM = grandMean
GM = mean(df$SalesInThousands)
#loop over promotions summing their contributions to SSbetween
SSbetween = 0
for(p in unique(df$Promotion)){
tmp = df %>% filter(Promotion == p)
SSbetween = SSbetween +
length(tmp$Promotion)*(mean(tmp$SalesInThousands) - GM)^2
}
MSbetween = SSbetween / dfbetween
#step 3: Use degrees of freedom to establish critical F-ratio
dfbetween = 3-1 #number of groups
dfwithin = nrow(df) - 3
#qf takes two df arguments: df1 is numerator
Fcrit = qf(.95, df1 = dfbetween, df2 = dfwithin)
# MSbetween = sum(ni(mean(Xi) - GM)^2) / (p-1)
#ni = number of observations in group i
#GM = grandMean
GM = mean(df$SalesInThousands)
#loop over promotions summing their contributions to SSbetween
SSbetween = 0
for(p in unique(df$Promotion)){
tmp = df %>% filter(Promotion == p)
SSbetween = SSbetween +
nrow(tmp)*(mean(tmp$SalesInThousands) - GM)^2
}
MSbetween = SSbetween / dfbetween
# MSwithin = sum((x - mean(X))^2) / (n-p) = SSwithin/dfwithin
#mean(x) means within group
#loop over Promotions summing their contributions to SSwithin
SSwithin = 0
for(p in unique(df$Promotion)){
tmp = df %>% filter(Promotion == p)
SSwithin = SSwithin + sum((tmp$SalesInThousands - mean(tmp$SalesInThousands))^2)
}
MSwithin = SSwithin / dfwithin
#F ratio:
Fratio = MSbetween / MSwithin
#step 5: compare F ratio observed to critical value
#AND step 6: provide interpretation to answer the question
if(Fratio > Fcrit){
print(cat("The observed F ratio of", round(Fratio,2),
"is greater than F critical of", round(Fcrit,2),
".\n Stores with different promotions differ in sales"))
} else{
print(cat("The observed F ratio of", round(Fratio,2),
"is NOT greater than F critical of", round(Fcrit,2),
".\n No evidence stores with different promotions differ in sales"))
}
#compare to builtin output:
anova(lm(SalesInThousands ~ Promotion, data = df))
