geom_point(size = 3)
qqVals %>% ggplot(aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqPlots <- function(df, varOfInterest, qVals, sumVals){
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
qqVals %>% ggplot(aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
}
qqPlots(df, varOfInterest, qVals, sumVals)
qqPlots(df, varOfInterest, qVals, sumVals)
qqPlots <- function(df, varOfInterest, qVals, sumVals){
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
outPlot = qqVals %>% ggplot(
aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
}
qqPlots(df, varOfInterest, qVals, sumVals)
df = read.csv(file.path(gitHubPath, 'data',
'emailTimes.csv'))
df <- df %>% group_by(DayOfWeek, Month, DayOfMonth, Year) %>%
summarize(count = n(), .groups = 'drop')
df$dummy = as.factor(1)
ggplot(df, aes(x = count, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(0, 51, 3)) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
emailSum <- df %>% summarize(setName = 'emailsPerDay',
meanVal = mean(count),
sdVal = sd(count),
logMean = mean(log(count)),
logSD = sd(log(count)),
offSet = 0)
plotAgainstDists(df, "count", emailSum, 'email')
qqPlots(df, 'count', seq(.01, 1, .05), emailSum)
df = read.csv(file.path(gitHubPath, 'data',
'SP500HistoricalData.csv'))
names(df)[6] <- 'Change'
df$Change = unlist(lapply(df$Change, function(x)
as.numeric(strsplit(x, '%')[[1]])))
df$dummy = as.factor(1)
ggplot(df, aes(x = Change, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(-2, 2, .1)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none') +
xlab('Daily Change (%)')
sp500Sum <- df %>% summarize(setName = 'sp500',
meanVal = mean(Change),
sdVal = sd(Change),
logMean = mean(log(Change-min(Change)+.01)),
logSD = sd(log(Change-min(Change)+.01)),
offSet = -min(Change)+.01)
plotAgainstDists(df, "Change",
sp500Sum, 'sp500')
qqPlots(df, 'Change', seq(.01, 1, .01), sp500Sum)
qqPlots <- function(df, varOfInterest, qVals, sumVals){
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
qqVals$lnorm = qqVals$lnorm + sumVals$offSet
outPlot = qqVals %>% ggplot(
aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
}
qqPlots(df, varOfInterest, qVals, sumVals)
qqPlots <- function(df, varOfInterest, qVals, sumVals){
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
qqVals$lnorm = qqVals$lnorm - sumVals$offSet
outPlot = qqVals %>% ggplot(
aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
}
qqPlots(df, varOfInterest, qVals, sumVals)
varOfInterest
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
# library(qqplotr)
# Chunk 2: functionitize
#you could experiment with putting this into another separate R script
#the same way that we did with the courseTheme!
plotAgainstDists <- function(df, varOfInterest, sumVals,
myTitle, binCount = 50){
x <- df[[varOfInterest]]
analyticDists <- data.frame(
'norm' = dnorm(x,
mean = sumVals$meanVal,
sd = sumVals$sdVal),
'poisson' = dpois(round(x),
lambda = sumVals$meanVal),
'logNorm' = dlnorm(x + sumVals$offSet,
meanlog = sumVals$logMean,
sdlog = sumVals$logSD),
'xVal' = x)
analyticDists <- analyticDists %>% pivot_longer(
cols =  names(analyticDists)[-4],
values_to = 'density',
names_to = 'dist')
df$dist = "empirical data"
df %>% ggplot(aes_string(x = varOfInterest, color = 'dist')) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, bins = binCount) +
geom_line(data = analyticDists, aes(x = xVal, y = density),
linewidth = 2) +
brightCol +  myTheme +
ggtitle(myTitle)
}
# Chunk 3: EEG
#load in the restingEEG dataset.
#Key variable name: pow_delta_O
df = read.csv(file.path(gitHubPath, 'data',
'restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
ggplot(df, aes(x = pow_delta_O, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
# Chunk 4: descriptives for EEG
EEGsum <- df %>% summarize(setName = 'deltaPow',
meanVal = mean(pow_delta_O),
sdVal = sd(pow_delta_O),
logMean = mean(log(pow_delta_O)),
logSD = sd(log(pow_delta_O)),
offSet = 0)
# Chunk 5: qq for EEG
varOfInterest = "pow_delta_O"
sumVals = EEGsum
plotAgainstDists(df, varOfInterest,
sumVals, 'EEG data')
qVals = seq(.01, .99, .01)
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
qqVals %>% ggplot(aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
# Chunk 6: qq function
qqPlots <- function(df, varOfInterest, qVals, sumVals){
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
qqVals$lnorm = qqVals$lnorm - sumVals$offSet
outPlot = qqVals %>% ggplot(
aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
}
qqPlots(df, varOfInterest, qVals, sumVals)
df = read.csv(file.path(gitHubPath, 'data',
'emailTimes.csv'))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
library(tidyverse) # data manipulation and visualization
source(file.path(gitHubPath, 'courseTheme.R'))
library(pracma)
# library(qqplotr)
# Chunk 2: functionitize
#you could experiment with putting this into another separate R script
#the same way that we did with the courseTheme!
plotAgainstDists <- function(df, varOfInterest, sumVals,
myTitle, binCount = 50){
x <- df[[varOfInterest]]
analyticDists <- data.frame(
'norm' = dnorm(x,
mean = sumVals$meanVal,
sd = sumVals$sdVal),
'poisson' = dpois(round(x),
lambda = sumVals$meanVal),
'logNorm' = dlnorm(x + sumVals$offSet,
meanlog = sumVals$logMean,
sdlog = sumVals$logSD),
'xVal' = x)
analyticDists <- analyticDists %>% pivot_longer(
cols =  names(analyticDists)[-4],
values_to = 'density',
names_to = 'dist')
df$dist = "empirical data"
df %>% ggplot(aes_string(x = varOfInterest, color = 'dist')) +
geom_freqpoly(aes(y = after_stat(density)),
linewidth = 2, bins = binCount) +
geom_line(data = analyticDists, aes(x = xVal, y = density),
linewidth = 2) +
brightCol +  myTheme +
ggtitle(myTitle)
}
# Chunk 3: EEG
#load in the restingEEG dataset.
#Key variable name: pow_delta_O
df = read.csv(file.path(gitHubPath, 'data',
'restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
ggplot(df, aes(x = pow_delta_O, color = dummy, fill = dummy)) +
geom_histogram() +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
# Chunk 4: descriptives for EEG
EEGsum <- df %>% summarize(setName = 'deltaPow',
meanVal = mean(pow_delta_O),
sdVal = sd(pow_delta_O),
logMean = mean(log(pow_delta_O)),
logSD = sd(log(pow_delta_O)),
offSet = 0)
# Chunk 5: qq for EEG
varOfInterest = "pow_delta_O"
sumVals = EEGsum
plotAgainstDists(df, varOfInterest,
sumVals, 'EEG data')
qVals = seq(.01, .99, .01)
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
qqVals %>% ggplot(aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
qqVals %>% ggplot(aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
# Chunk 6: qq function
qqPlots <- function(df, varOfInterest, qVals, sumVals){
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
outPlot = qqVals %>% ggplot(
aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
}
qqPlots(df, varOfInterest, qVals, sumVals)
# Chunk 7: email
df = read.csv(file.path(gitHubPath, 'data',
'emailTimes.csv'))
df <- df %>% group_by(DayOfWeek, Month, DayOfMonth, Year) %>%
summarize(count = n(), .groups = 'drop')
df$dummy = as.factor(1)
ggplot(df, aes(x = count, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(0, 51, 3)) +
myTheme + brightFil + brightCol + theme(legend.position = 'none')
# Chunk 8: descriptives for emails
emailSum <- df %>% summarize(setName = 'emailsPerDay',
meanVal = mean(count),
sdVal = sd(count),
logMean = mean(log(count)),
logSD = sd(log(count)),
offSet = 0)
# Chunk 9: analytic comparison for email frequency
plotAgainstDists(df, "count", emailSum, 'email')
qqPlots(df, 'count', seq(.01, 1, .05), emailSum)
# Chunk 10: sp 500
df = read.csv(file.path(gitHubPath, 'data',
'SP500HistoricalData.csv'))
names(df)[6] <- 'Change'
df$Change = unlist(lapply(df$Change, function(x)
as.numeric(strsplit(x, '%')[[1]])))
df$dummy = as.factor(1)
ggplot(df, aes(x = Change, color = dummy, fill = dummy)) +
geom_histogram(breaks = seq(-2, 2, .1)) +
myTheme + brightFil + brightCol +
theme(legend.position = 'none') +
xlab('Daily Change (%)')
# Chunk 11: descriptives for sp500
sp500Sum <- df %>% summarize(setName = 'sp500',
meanVal = mean(Change),
sdVal = sd(Change),
logMean = mean(log(Change-min(Change)+.01)),
logSD = sd(log(Change-min(Change)+.01)),
offSet = -min(Change)+.01)
plotAgainstDists(df, "Change",
sp500Sum, 'sp500')
qqPlots(df, 'Change', seq(.01, 1, .01), sp500Sum)
qqPlots <- function(df, varOfInterest, qVals, sumVals){
qqVals = data.frame('empirical' = quantile(df[[varOfInterest]],
qVals),
'norm' = qnorm(qVals, sumVals$meanVal,
sumVals$sdVal),
'lnorm' = qlnorm(qVals, sumVals$logMean,
sumVals$logSD),
'pois' = qpois(qVals, sumVals$meanVal),
'unif' = qunif(qVals, min(df[[varOfInterest]]),
max(df[[varOfInterest]])),
'qVals'= qVals)
qqVals$lnorm = qqVals$lnorm - sumVals$offSet
outPlot = qqVals %>% ggplot(
aes(x = norm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = lnorm, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = pois, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
outPlot = qqVals %>% ggplot(
aes(x = unif, y = empirical, color = qVals)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0)
print(outPlot)
}
qqPlots(df, varOfInterest, qVals, sumVals)
varOfInterest
View(df)
View(df)
qqPlots(df, 'Change', seq(.01, 1, .01), sp500Sum)
df = read.csv(file.path(gitHubPath, 'data',
'MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = TargALL_UVSD_d,
color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
myTheme + brightCol + brightFil +
theme(legend.position = 'none')
memSum <- df %>% summarize(setName = 'humMem',
meanVal = mean(TargALL_UVSD_d),
sdVal = sd(TargALL_UVSD_d),
logMean = mean(log(TargALL_UVSD_d)),
logSD = sd(log(TargALL_UVSD_d)),
offSet = 0)
plotAgainstDists(df, "TargALL_UVSD_d",
memSum, "mem data", 20)
qqPlots(df, 'TargALL_UVSD_d', seq(.01, 1, .01), memSum)
