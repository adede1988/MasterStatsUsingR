source("~/.active-rstudio-document", echo=TRUE)
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
courseThemePath =
"C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\courseTheme.R"
source(courseThemePath)
brainDat = data.frame('region'  = c('ACC', 'dlPFC', 'Hip', 'PHG', 'pPFC'),
'total'   = c(44, 247, 40, 79, 35),
'reactive'= c(21, 133, 21, 54, 30))
brainLong = pivot_longer(brainDat, cols = c(total, reactive),
names_to = 'type',
values_to= 'elecs')
View(brainLong)
brainLong %>% ggplot(aes(x=region, color = region, fill = type, y = elecs))+
geom_bar(stat = 'identity', size = 3) + brightFil + myTheme
brainDat$propReact = brainDat$reactive / brainDat$total
brainDat %>% ggplot(aes(x = region, color = region, fill = region,
y = propReact))+
geom_bar(stat = 'identity') + brightCol + brightFil + myTheme
View(brainDat)
numReg = length(brainDat$region)
#what's the column total for total channels?
totChannels = sum(brainDat$total)
#what's the column total for reactive channels?
totReact = sum(brainDat$reactive)
#what's the total of all observations?
totAll = totChannels + totReact
#what's the region sum within each region?
brainDat$regSum = brainDat$total + brainDat$reactive
#get the expected values
brainDat$totalExpected = brainDat$regSum * totChannels / totAll
brainDat$reactiveExpected = brainDat$regSum * totReact / totAll
brainDat$chiSquareTotal = (brainDat$total - brainDat$totalExpected)^2 /
brainDat$totalExpected
brainDat$chiSquareReact = (brainDat$reactive - brainDat$reactiveExpected)^2 /
brainDat$reactiveExpected
testStat = sum(brainDat$chiSquareReact) + sum(brainDat$chiSquareTotal)
numConditions = 2
degressOfFreedom = (numReg - 1) * (numConditions - 1)
critVal = qchisq(.95, degreesOfFreedom)
degreesOfFreedom = (numReg - 1) * (numConditions - 1)
critVal = qchisq(.95, degreesOfFreedom)
if(critVal < testStat){
print('there is significant variability between total channels across regions')
print(paste('chiSq =', testStat, '; DF =', degreesOfFreedom, 'p-value =', pVal))
} else {
print('there is not variability between total channels across regions')
print(paste('chiSq =', testStat, '; DF =', degreesOfFreedom, 'p-value =', pVal))
}
pVal = 1 - pchisq(testStat, degreesOfFreedom)
if(critVal < testStat){
print('there is significant variability between total channels across regions')
print(paste('chiSq =', testStat, '; DF =', degreesOfFreedom, 'p-value =', pVal))
} else {
print('there is not variability between total channels across regions')
print(paste('chiSq =', testStat, '; DF =', degreesOfFreedom, 'p-value =', pVal))
}
chisq.test(brainDat[,c('reactive', 'total')])
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(maps)
library(mapdata)
# more info about plotting on US maps:
# https://jtr13.github.io/cc19/different-ways-of-plotting-u-s-map-in-r.html
#data downloaded from: https://www.cdc.gov/nchs/pressroom/sosmap/cesarean_births/cesareans.htm
path = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\data\\'
cSec = read.csv(paste0(path, 'CsectionRates.csv'))
View(cSec)
state <- map_data('state')
state <- map_data('state')
ggplot(data = state, aes(x = long, y = lat, fill = region, group = group))+
geom_polygon(color = 'white') +
guides(fill=FALSE) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States') +
coord_fixed(1.3)
View(state)
state_abbreviations <- data.frame(
State = c(
"Alabama", "Alaska", "Arizona", "Arkansas",
"California", "Colorado", "Connecticut", "Delaware",
"Florida", "Georgia", "Hawaii", "Idaho", "Illinois",
"Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana",
"Maine", "Maryland", "Massachusetts", "Michigan",
"Minnesota", "Mississippi", "Missouri", "Montana",
"Nebraska", "Nevada", "New Hampshire", "New Jersey",
"New Mexico", "New York", "North Carolina",
"North Dakota", "Ohio", "Oklahoma", "Oregon",
"Pennsylvania", "Rhode Island", "South Carolina",
"South Dakota", "Tennessee", "Texas", "Utah",
"Vermont", "Virginia", "Washington", "West Virginia",
"Wisconsin", "Wyoming"
),
Abbreviation = c(
"AL", "AK", "AZ", "AR", "CA",
"CO", "CT", "DE", "FL", "GA",
"HI", "ID", "IL", "IN", "IA",
"KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ",
"NM", "NY", "NC", "ND", "OH",
"OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VT",
"VA", "WA", "WV", "WI", "WY"
)
)
names(state_abbreviations) <- c("stateLong", "STATE")
#now we can link this information together!
merge(state_abbreviations, cSec) -> cSec
names(state)[5] = 'stateLong'
cSec = filter(cSec, YEAR == 2021)
merge(cSec, state) -> plotDat
cSec$stateLong <- tolower(cSec$stateLong)
merge(cSec, state) -> plotDat
ggplot(data = plotDat, aes(x = long, y = lat, fill = RATE, group = group))+
geom_polygon(color = 'white') +
guides(fill=FALSE) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States') +
coord_fixed(1.3)
View(plotDat)
ggplot(plotDat, aes(x = c(1:length(order)), y = order)) + geom_point()
plotDat <- plotDat %>% arrange(order)
ggplot(data = plotDat, aes(x = long, y = lat, fill = RATE, group = group))+
geom_polygon(color = 'white') +
guides(fill=FALSE) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States') +
coord_fixed(1.3)
ggplot(data = plotDat, aes(x = long, y = lat, fill = RATE, group = group))+
geom_polygon(color = 'white') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States') +
coord_fixed(1.3)
data <- read_delim(paste0(path, 'Natality, 2016-2022 expanded.txt'),
delim = "\t", # Specify tab as the delimiter
quote = "\"", # Specify quotation marks as text qualifiers
col_names = c("Notes", "StateOfRes", "StateCode", "Births"),
skip = 1 # Adjust this as needed to skip any header info
)
View(data)
data <- data[!is.na(data$StateCode), ]
data <- select(data, -Notes)
data$StateOfRes <- tolower(data$StateOfRes)
names(data) <- c("stateLong", "code", "Births")
cSec <- merge(cSec, data) %>% select(c('YEAR', 'stateLong', 'RATE', 'Births'))
merge(state, cSec) -> plotDat
plotDat <- plotDat %>% arrange(order)
ggplot(data = plotDat, aes(x = long, y = lat, fill = Births, group = group))+
geom_polygon(color = 'white')  +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggtitle('U.S. births map') +
coord_fixed(1.3)
cSec$cSec = round(cSec$Births * (cSec$RATE/100))
cSec$vaginal = cSec$Births - cSec$cSec
cSec$cSec = round(cSec$Births * (cSec$RATE/100))
cSec$vaginal = cSec$Births - cSec$cSec
chisq.test(cSec[,c('cSec', 'vaginal')])
cSec$expectedC =  round(cSec$Births * mean((cSec$RATE/100)))
cSec$expectedC =  round(cSec$Births * mean((cSec$RATE/100)))
cSec$deviation = (cSec$cSec - cSec$expectedC) / cSec$expectedC
merge(state, cSec) -> plotDat
plotDat <- plotDat %>% arrange(order)
ggplot(data = plotDat, aes(x = long, y = lat, fill = deviation, group = group))+
geom_polygon(color = 'white')  +
scale_fill_gradientn(
colors = c('navy',  "green", "red")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggtitle('U.S. c-section deviation') +
coord_fixed(1.3)
