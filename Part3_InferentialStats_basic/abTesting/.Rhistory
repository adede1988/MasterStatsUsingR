linewidth = 2, linetype = 'dashed')+
geom_vline(xintercept = mean(child), color = '#6EE11F',
linewidth = 2, linetype = 'dashed') +
geom_line(data = data.frame(pow = seq(0,200),
count = dnorm(seq(0,200),mean(child), sd(child))),
aes(x = pow, y = count*300), color = '#6EE11F',
linewidth = 1) +
geom_line(data = data.frame(pow = seq(0,200),
count = dnorm(seq(0,200),mean(child[child<150]),
sd(child[child<150]))),
aes(x = pow, y = count*150), color = '#6EE11F',
linewidth = 1, linetype = 'dotted')
tmp = data.frame(pow = c(child[child<150]),
childBaby = c(rep('child', 9)))
ggplot(tmp, aes(x = pow)) +
geom_freqpoly(linewidth = 2, color = '#6EE11F') +
myTheme + brightCol +
geom_vline(xintercept = mean(baby), color = '#20CDF2',
linewidth = 2, linetype = 'dashed')+
geom_vline(xintercept = mean(child), color = '#6EE11F',
linewidth = 2, linetype = 'dashed') +
geom_line(data = data.frame(pow = seq(0,200),
count = dnorm(seq(0,200),mean(child), sd(child))),
aes(x = pow, y = count*150), color = '#6EE11F',
linewidth = 1)
ggplot(tmp, aes(x = pow)) +
geom_freqpoly(linewidth = 2, color = '#6EE11F') +
myTheme + brightCol +
geom_vline(xintercept = mean(baby), color = '#20CDF2',
linewidth = 2, linetype = 'dashed')+
geom_vline(xintercept = mean(child), color = '#6EE11F',
linewidth = 2, linetype = 'dashed') +
geom_line(data = data.frame(pow = seq(0,200),
count = dnorm(seq(0,200),mean(child[child<150]),
sd(child[child<150]))),
aes(x = pow, y = count*150), color = '#6EE11F',
linewidth = 1)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
#Key variable name: pow_delta_O
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
df <- df %>% filter(age<(8*12))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
# Chunk 2: EEG
#Key variable name: pow_delta_O
df = read.csv(paste0(gitHubPath, '\\data\\restingEEG.csv'))
df$dummy = as.factor(1)
df <- df %>% filter(pow_delta_O < 250, pow_delta_O > 0)
df <- df %>% filter(age<(8*12))
df$babyChild = df$age<50
df$babyChild[df$babyChild] = 'baby'
df$babyChild[df$babyChild=='FALSE'] = 'child'
pvals = data.frame(tlog = rep(0,100),
t = rep(0,100),
wil = rep(0,100))
for(ii in 1:100){
set.seed(ii)
child = df$pow_delta_O[df$babyChild == 'child']
baby = df$pow_delta_O[df$babyChild == 'baby']
child = child[randsample(length(child), 10)]
baby = baby[randsample(length(baby), 10)]
res = t.test(log(child,10), log(baby,10))
res2 = t.test(child, baby)
res3 = wilcox.test(child,baby)
pvals$tlog[ii] = res$p.value
pvals$t[ii] = res2$p.value
pvals$wil[ii] = res3$p.value
}
View(pvals)
pvals = data.frame(tlog = rep(0,100),
t = rep(0,100),
wil = rep(0,100))
for(ii in 1:100){
set.seed(ii)
child = df$pow_delta_O[df$babyChild == 'child']
baby = df$pow_delta_O[df$babyChild == 'baby']
child = child[randsample(length(child), 10)]
baby = baby[randsample(length(baby), 10)]
res = t.test(log(child,10), log(baby,10))
res2 = t.test(child, baby)
res3 = wilcox.test(child,baby)
pvals$tlog[ii] = res$p.value
pvals$t[ii] = res2$p.value
pvals$wil[ii] = res3$p.value
}
print(paste(sum(pvals$tlog<.05) 'of 100 for log transformed t-test'))
pvals = data.frame(tlog = rep(0,100),
t = rep(0,100),
wil = rep(0,100))
for(ii in 1:100){
set.seed(ii)
child = df$pow_delta_O[df$babyChild == 'child']
baby = df$pow_delta_O[df$babyChild == 'baby']
child = child[randsample(length(child), 10)]
baby = baby[randsample(length(baby), 10)]
res = t.test(log(child,10), log(baby,10))
res2 = t.test(child, baby)
res3 = wilcox.test(child,baby)
pvals$tlog[ii] = res$p.value
pvals$t[ii] = res2$p.value
pvals$wil[ii] = res3$p.value
}
print(paste(sum(pvals$tlog<.05), 'of 100 for log transformed t-test'))
pvals = data.frame(tlog = rep(0,100),
t = rep(0,100),
wil = rep(0,100))
for(ii in 1:100){
set.seed(ii)
child = df$pow_delta_O[df$babyChild == 'child']
baby = df$pow_delta_O[df$babyChild == 'baby']
child = child[randsample(length(child), 10)]
baby = baby[randsample(length(baby), 10)]
res = t.test(log(child,10), log(baby,10))
res2 = t.test(child, baby)
res3 = wilcox.test(child,baby)
pvals$tlog[ii] = res$p.value
pvals$t[ii] = res2$p.value
pvals$wil[ii] = res3$p.value
}
print(paste(sum(pvals$tlog<.05), 'of 100 for log transformed t-test'))
print(paste(sum(pvals$t<.05), 'of 100 for log transformed t-test'))
print(paste(sum(pvals$wil<.05), 'of 100 for log transformed t-test'))
pvals = data.frame(tlog = rep(0,100),
t = rep(0,100),
wil = rep(0,100))
for(ii in 1:100){
set.seed(ii)
child = df$pow_delta_O[df$babyChild == 'child']
baby = df$pow_delta_O[df$babyChild == 'baby']
child = child[randsample(length(child), 10)]
baby = baby[randsample(length(baby), 10)]
res = t.test(log(child,10), log(baby,10))
res2 = t.test(child, baby)
res3 = wilcox.test(child,baby)
pvals$tlog[ii] = res$p.value
pvals$t[ii] = res2$p.value
pvals$wil[ii] = res3$p.value
}
print(paste(sum(pvals$tlog<.05), 'of 100 for Log Transformed t-test'))
print(paste(sum(pvals$t<.05), 'of 100 for raw t-test'))
print(paste(sum(pvals$wil<.05), 'of 100 for Wilcoxon Rank Sum test'))
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
View(df)
devThresh = 12000
df$gdpPerCap - devThresh
df$relativeDif = df$gdpPerCap - devThresh
df <- df %>% arrange(relativeDif)
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(color = 'green') +
myTheme
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(color = '#6EE11F', fill = '#6EE11F') +
myTheme
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,125000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,130000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df <- df %>% arrange(relativeDif)
df$abdif = abs(df$relativeDif)
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
df$signDif = df$relativeDif / df$abdif
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
signCombos = expand.grid(rep(list(c(0,1)), n))
n = length(df$countryLong)
ranks = 1:n
signCombos = expand.grid(rep(list(c(0,1)), n))
list(c(0,1))
rep(list(c(0,1)), n)
expand.grid(rep(list(c(0,1)), n))
combn(2,1)
n <- 4
ranks <- 1:n
# Generate all possible combinations of 0 (negative) and 1 (positive) for each rank
sign_combinations <- as.matrix(expand.grid(rep(list(c(0, 1)), n)))
View(sign_combinations)
n = length(df$countryLong)
ranks = 1:n
signCombos = expand.grid(rep(list(c(0,1)), n))
n = length(df$countryLong)[1]
ranks = 1:n
signCombos = expand.grid(rep(list(c(0,1)), n))
n = length(df$countryLong)
ranks = 1:n
signCombos = expand.grid(rep(list(c(0,1)), n))
n = length(df$countryLong)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
t.test(df$gdpPerCap, mu = devThresh)
wilcox.test(df$gdpPerCap, mu = devThresh)
median(df$gdpPerCap)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
((n*(n+1))/2)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 12000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
n = length(df$countryLong)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 14000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 12000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 10000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 11946.65
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 15000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 14000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 13000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 14000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
pnorm(zneg)
pnorm(zneg)*2
df = read.csv('G:\\My Drive\\Teaching\\stats\\RCourse\\cleanData\\plasticWaste.csv')
devThresh = 14000
df %>% ggplot(aes(x = gdpPerCap)) +
geom_histogram(breaks = seq(1,131000,5000),
color = '#6EE11F', fill = '#6EE11F') +
myTheme +
geom_vline(xintercept = devThresh, color = 'purple', linewidth = 2)
t.test(df$gdpPerCap, mu = devThresh)
df$relativeDif = df$gdpPerCap - devThresh
df$abdif = abs(df$relativeDif)
df$signDif = df$relativeDif / df$abdif
df <- df %>% arrange(abdif)
df$rank = seq(1,length(df$abdif))
posRank = sum(df$rank[df$signDif == 1])
negRank = sum(df$rank[df$signDif == -1])
min(posRank, negRank)
n = length(df$countryLong)
effectSize = abs(posRank - negRank) / ((n*(n+1))/2)
meanW = n*(n+1) / 4
sdW = sqrt(n * (n + 1) * (2 * n + 1) / 24)
zpos = (posRank - meanW) / sdW
zneg = (negRank - meanW) / sdW
pnorm(zneg)*2
median(df$gdpPerCap)
wilcox.test(df$gdpPerCap, mu = devThresh)
zneg_corrected <- (negRank - meanW - 0.5) / sdW
zpos_corrected <- (posRank - meanW + 0.5) / sdW
# Two-tailed p-value
p_value_corrected <- 2 * pnorm(zneg_corrected)
p_value_corrected
pnorm(zneg_corrected) + 1 - pnorm(zpos_corrected)
sum(duplicated(df$gdpPerCap))
wilcox.test(df$gdpPerCap, mu = devThresh, exact = F)
print(paste('The approximate 2-tailed p value is: ',
(1-pnorm(zneg))*2, ' based on a rank sum of: ', posRank))
print(paste('The approximate 2-tailed p value is: ',
(1-pnorm(zpos))*2, ' based on a rank sum of: ', posRank))
print(paste('The approximate 2-tailed p value is: ',
round((1-pnorm(zpos))*2,2), ' based on a rank sum of: ', posRank))
print(paste('The approximate 2-tailed p value is: ',
round((1-pnorm(zpos))*2,3), ' based on a rank sum of: ', posRank))
# Chunk 1
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath = 'C:\\Users\\Adam\\Documents\\GitHub\\MasterStatsUsingR\\'
library(BSDA)
library(tidyverse) # data manipulation and visualization
source(paste0(gitHubPath, 'courseTheme.R'))
library(pracma)
df = read.csv(paste0(gitHubPath, 'data\\MemoryData.csv'))
df <- df %>% filter(TargALL_UVSD_d >=0)
df$memDif = df$L1cor_UVSD_d - df$L5_UVSD_d
#first plot the histogram of country total populations
df$dummy = as.factor(1)
df %>% ggplot(aes(x = memDif, color = dummy, fill = dummy)) +
geom_histogram(bins = 10) +
xlab('L5 better     Mem Dif      L1 better') +
myTheme + brightCol + brightFil + theme(legend.position = 'none')
wilcox.test(df$memDif, mu = 0)
t.test(df$memDif, mu = 0)
