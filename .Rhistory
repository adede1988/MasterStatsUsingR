# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
# Load packages
library(tidyverse) # data manipulation and visualization
#R's builtin hist function
hist(mpg$hwy)
#ggplot histogram
ggplot(mpg, aes(x=hwy)) +
geom_histogram()
#grammar check, which of these did we specify and which were automatic?
#data
#geometric object
#mapping
#scale
#coordinate system
plotDat = mpg %>% group_by(year, model) %>%
summarize(hwy = mean(hwy))
ggplot(plotDat, aes(x=year, y = hwy, group = model)) +
geom_point() +
geom_line()+
ylab('miles per gallon') +
xlab('year') +
ggtitle("fuel efficiency over time")
#can you figure out how to mutate the information in plotDat to
#create a new changeScore time for each model of car across years?
#this doesn't work:
changeDat = plotDat %>% group_by(model) %>%
mutate(changeScore = hwy[1] - hwy[2])
#pivot wider!
changeDat = plotDat %>% pivot_wider(id_cols = model,
names_from = year,
values_from = hwy)
#numeric column names are bad!
changeDat$changeScore = changeDat[['2008']] - changeDat[['1999']]
changeDat %>% ggplot(aes(x = changeScore)) +
geom_histogram() +
xlab('mpg in 2008 - mpg in 1999')
# Set rendering parameters
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
gitHubPath <- file.path(path.expand("~"), "GitHub",
"MasterStatsUsingR")
# Load packages
library(tidyverse) # data manipulation and visualization
mpg %>% ggplot(aes(x = hwy))+
geom_bar()
#geom_bar defaults don't really make a "bar plot"
mpg %>% ggplot(aes(x = model, y = hwy,
color = year, fill = year))+
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5, hjust = 1))
mpg %>% ggplot(aes(x = model, y = hwy,
color = year, fill = year))+
geom_bar(stat = 'identity', position = 'dodge') +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5, hjust = 1))
df = mpg
df$uniqueID = paste(mpg$model,
mpg$displ,
mpg$year, sep = '_')
df %>% ggplot(aes(x = uniqueID, y = hwy,
color = year, fill = year))+
geom_bar(stat = 'identity', position = 'dodge') +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5, hjust = 1))
#okay, but this plot is unreadable!
plotVals = mpg %>%
group_by(class) %>%
summarize(hwy=mean(hwy))
plotVals %>% ggplot(aes(x=class, y = hwy, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
plotVals = mpg %>%
group_by(class) %>%
summarize(hwy=mean(hwy))
p = plotVals %>% ggplot(aes(x=class, y = hwy, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
p + theme(
axis.text.y = element_text(size=16,
color="blue",
face="bold",
angle=0),
axis.text.x = element_text(size=16,
color="blue",
face="bold",
angle=0),
plot.title = element_text(size=20,
color="green",
face="bold",
angle=0)
)
p + theme(
axis.text.y = element_text(size=16,
color="blue",
face="bold",
angle=0),
axis.text.x = element_text(size=16,
color="blue",
face="bold",
angle=90),
plot.title = element_text(size=20,
color="green",
face="bold",
angle=0)
)
p + theme(
axis.text.y = element_text(size=16,
color="blue",
face="bold",
angle=90),
axis.text.x = element_text(size=16,
color="blue",
face="bold",
angle=0),
plot.title = element_text(size=20,
color="green",
face="bold",
angle=0)
)
p + theme(
axis.text.y = element_text(size=16,
color="blue",
face="bold",
angle=0),
axis.text.x = element_text(size=16,
color="blue",
face="bold",
angle=0),
plot.title = element_text(size=20,
color="green",
face="bold",
angle=0)
)
myText = element_text(size=16,
color="blue",
face="bold",
angle=0)
bigText = element_text(size = 20,
color='green',
face='bold',
angle=0)
p + theme(
axis.text.y = myText,
axis.text.x = myText,
plot.title = bigText
)
backCol = element_rect(fill = "#1C1A3B", color = "#1C1A3B" )
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
plot.title = bigText
)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.x = myText,
plot.title = bigText
)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText,
plot.title = bigText
)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText,
plot.title = bigText
)
myText90 = element_text(size=16,
color="blue",
face="bold",
angle=90)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText
)
myText90 = element_text(size=16,
color="#FFEAB1",
face="bold",
angle=90)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText
)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText,
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
axis.line = element_line(colour = "#FFEAB1",
size = 2, linetype = "solid"),
axis.ticks = element_line(colour = "#FFEAB1",
size = 2, linetype = "solid"),
axis.ticks.length=unit(-0.25, "cm") #determine length/direction of ticks
)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText,
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
axis.line = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks.length=unit(-0.25, "cm") #determine length/direction of ticks
)
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText,
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
axis.line = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks.length=unit(-0.25, "cm") #determine length/direction of ticks
) + brightCol
brightCol = scale_color_manual(values =
c('#20CDF2', '#6EE11F', '#415d2e',
'#a05824','#d5db52' ))
brightFil = scale_fill_manual(values =
c('#20CDF2', '#6EE11F', '#415d2e',
'#a05824','#d5db52' ))
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText,
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
axis.line = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks.length=unit(-0.25, "cm") #determine length/direction of ticks
) + brightCol
brightCol = scale_color_manual(values =
c('#20CDF2', '#6EE11F', '#415d2e',
'#a05824', '#d5db52', '#E24C3A', '#9B4F96', '#F1A14C'))
brightFil = scale_fill_manual(values =
c('#20CDF2', '#6EE11F', '#415d2e',
'#a05824', '#d5db52', '#E24C3A', '#9B4F96', '#F1A14C'))
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText,
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
axis.line = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks.length=unit(-0.25, "cm") #determine length/direction of ticks
) + brightCol
p + theme(
panel.background = backCol, # bg of the panel
plot.background = backCol,
axis.text.y = myText,
axis.text.x = myText,
axis.title.y = myText90,
plot.title = bigText,
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
axis.line = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks = element_line(colour = "#FFEAB1",
linewidth = 2, linetype = "solid"),
axis.ticks.length=unit(-0.25, "cm") #determine length/direction of ticks
) + brightCol + brightFil
mpg %>%
group_by(class) %>%  #,
summarize(meanVals=mean(hwy)) -> plotVals
p <- ggplot(plotVals, aes(x=class,y = meanVals, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
p + brightCol + brightFil + myTheme
myText90 = element_text(size=16,
color="#FFEAB1",
face="bold",
angle=90)
#Statistics with R using the Tidyverse:
#intuition, basic coding, and applications
#plotting scratch sheet
#Adam Dede; adam.osman.dede@gmail.com
#Fall 2021
setwd("C:/Users/Adam Dede/Google Drive/Teaching/stats/RCourse/plotting")
myText90 = element_text(size=16,
color="#FFEAB1",
face="bold",
angle=90)
myText = element_text(size=16,
color="#FFEAB1",
face="bold",
angle=0)
myTextBig = element_text(size=20,
color="#84E642",
face="bold",
angle=0,
hjust = .5)
myTheme = theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.title.x = myText,
axis.title.y = myText90,
axis.text.y = myText,
axis.text.x = myText,
plot.title = myTextBig,
axis.line = element_line(colour = "#FFEAB1",
size = 1, linetype = "solid"),
axis.ticks = element_line(colour = "#FFEAB1",
size = 1, linetype = "solid")
)
myText90 = element_text(size=16,
color="#ABA269",
face="bold",
angle=90)
myText = element_text(size=16,
color="#ABA269",
face="bold",
angle=0)
myTextBig = element_text(size=20,
color="#ABA269",
face="bold",
angle=0,
hjust = .5)
myThemeDark = theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.title.x = myText,
axis.title.y = myText90,
axis.text.y = myText,
axis.text.x = myText,
plot.title = myTextBig,
axis.line = element_line(colour = "#ABA269",
size = 1, linetype = "solid"),
axis.ticks = element_line(colour = "#ABA269",
size = 1, linetype = "solid")
)
brightCol = scale_color_manual(values = rep('#20CDF2',
length(unique(mpg$class))))
brightFil = scale_fill_manual(values = rep('#20CDF2',
length(unique(mpg$class))))
dimCol = scale_color_manual(values = rep('#ABA269',
length(unique(mpg$class))))
dimFil = scale_fill_manual(values = rep('#ABA269',
length(unique(mpg$class))))
####################################################################
#### SCATTER PLOT ##################################################
####################################################################
p <- ggplot(mpg, aes(x=displ, y = hwy, color = class))+
geom_point(show.legend = F) +
ylab('miles per gallon') +
xlab('engine size (L)') +
ggtitle("fuel efficiency as a function \n of engine size")
p + brightCol + myTheme
plotVals = mpg %>%
group_by(class) %>%
summarize(hwy=mean(hwy))
plotVals %>% ggplot(aes(x=class, y = hwy, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
plotVals = mpg %>%
group_by(class) %>%
summarize(hwy=mean(hwy),
sd = sd(hwy))
plotVals %>% ggplot(aes(x=class, y = hwy, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
geom_errorbar(aes(ymin = hwy - sd, ymax = hwy + sd)) +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
plotVals
plotVals = mpg %>%
group_by(class)
mpg %>% count(class)
mpg %>%
group_by(class) %>%
summarize(
n_total = n(),
n_na = sum(is.na(hwy)),
hwy_mean = mean(hwy, na.rm = TRUE),
hwy_sd = sd(hwy, na.rm = TRUE)
)
mpg %>%
group_by(class) %>%
summarize(
n_total = n(),
n_na = sum(is.na(hwy)),
hwy_mean = mean(hwy, na.rm = TRUE),
hwy_sd = sd(hwy)
)
plotVals = mpg %>%
group_by(class) %>%
summarize(hwy=mean(hwy),
hwy_sd = sd(hwy))
plotVals
mpg %>%
group_by(class) %>%
summarize(
n_total = n(),
n_na = sum(is.na(hwy)),
hwy_mean = mean(hwy, na.rm = TRUE),
hwy_sd = sd(hwy)
)
mpg %>%
group_by(class) %>%
summarize(hwy=mean(hwy),
hwy_sd = sd(hwy))
mpg %>%
group_by(class) %>%
summarize(hwy_mean=mean(hwy),
hwy_sd = sd(hwy))
plotVals %>% ggplot(aes(x=class, y = hwy_mean, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
geom_errorbar(aes(ymin = hwy_mean - hwy_sd, ymax = hwy_mean + hwy_sd)) +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
plotVals = mpg %>%
group_by(class) %>%
summarize(hwy_mean=mean(hwy),
hwy_sd = sd(hwy))
plotVals %>% ggplot(aes(x=class, y = hwy_mean, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
geom_errorbar(aes(ymin = hwy_mean - hwy_sd, ymax = hwy_mean + hwy_sd)) +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
plotVals %>% ggplot(aes(x=class, y = hwy_mean, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
geom_errorbar(aes(ymin = hwy_mean - hwy_sd,
ymax = hwy_mean + hwy_sd), color = 'black',
show.legend = F) +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
plotVals %>% ggplot(aes(x=class, y = hwy_mean, color = class, fill = class))+
geom_bar(show.legend = F, stat = 'identity') +
geom_errorbar(aes(ymin = hwy_mean - hwy_sd,
ymax = hwy_mean + hwy_sd), color = 'black',
show.legend = F, width = .2) +
ylab('miles per gallon') +
xlab('') +
ggtitle("fuel efficiency by types of vehicle")
